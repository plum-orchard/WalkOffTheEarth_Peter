import React, { Component } from 'react';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var defaultStyle = { cursor: 'pointer' };

var Clickable = function (_Component) {
  inherits(Clickable, _Component);

  function Clickable() {
    var _temp, _this, _ret;

    classCallCheck(this, Clickable);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.onKeyDown = function (e) {
      if (e.keyCode === 13 || e.keyCode === 32) {
        var eventHandler = _this.props.onKeyDown || _this.props.onClick || _this.props.onMouseDown;

        if (eventHandler) {
          eventHandler(e);
        }
      }
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  Clickable.prototype.render = function render() {
    var _props = this.props,
        ariaLabel = _props.ariaLabel,
        children = _props.children,
        onKeyDown = _props.onKeyDown,
        role = _props.role,
        tabIndex = _props.tabIndex,
        rest = objectWithoutProperties(_props, ['ariaLabel', 'children', 'onKeyDown', 'role', 'tabIndex']);


    return React.createElement(
      'div',
      _extends({
        'aria-label': ariaLabel,
        onKeyDown: this.onKeyDown,
        style: defaultStyle,
        role: role,
        tabIndex: tabIndex
      }, rest),
      children
    );
  };

  return Clickable;
}(Component);

Clickable.defaultProps = {
  role: 'button',
  tabIndex: 0
};

var defaultStyle$1 = { cursor: 'pointer' };

var StopPropagation = function (_Component) {
  inherits(StopPropagation, _Component);

  function StopPropagation() {
    var _temp, _this, _ret;

    classCallCheck(this, StopPropagation);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.stopEventPropagation = function (e) {
      e.stopPropagation();
    }, _this.onKeyDown = function (e) {
      if (e.keyCode === 13 || e.keyCode === 32) {
        e.stopPropagation();
      }
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  StopPropagation.prototype.render = function render() {
    var _props = this.props,
        children = _props.children,
        className = _props.className;

    return React.createElement(
      'div',
      {
        className: className,
        onClick: this.stopEventPropagation,
        onMouseDown: this.stopEventPropagation,
        onKeyDown: this.onKeyDown,
        style: defaultStyle$1,
        tabIndex: '-1'
      },
      children
    );
  };

  return StopPropagation;
}(Component);

export { Clickable, StopPropagation };
//# sourceMappingURL=index.js.map
