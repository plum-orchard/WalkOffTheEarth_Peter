{"ast":null,"code":"const EMPTY = 0;\n\nArray.prototype.swap = function (i, j) {\n  // eslint-disable-line no-extend-native\n  var _ref = [this[j], this[i]];\n  this[i] = _ref[0];\n  this[j] = _ref[1];\n  return this;\n};\n\nexport default class BoardLogic {\n  /**\r\n   * Constructor\r\n   * @param {*} data can be one of three:\r\n   * size (number): init matrix with size number*number \r\n   * matrix: if array use given array as matrix\r\n   * other: use default size\r\n   */\n  constructor(data) {\n    const DEFAULT_SIZE = 3;\n\n    if (Array.isArray(data)) {\n      // Data is Array\n      this.size = Math.ceil(Math.sqrt(data.length));\n      this.board = [...data];\n    } else {\n      // Data is number or undefiend\n      this.size = isNaN(data) ? DEFAULT_SIZE : data;\n      this.board = this.initBord(data);\n    }\n  }\n  /**\r\n  * Gets a new board of the given size\r\n  * @param {Number} size amount of Boxes per row\r\n  */\n\n\n  initBord(size) {\n    if (size == 2) {\n      return [0, 1, 3, 2];\n    }\n\n    return Array.from({\n      length: size * size\n    }, (_, b) => b);\n  }\n  /**\r\n   * Getter, return a copy of the game board \r\n   */\n\n\n  get matrix() {\n    return this.board.reduce((rows, key, index) => (index % this.size === 0 ? rows.push([key]) : rows[rows.length - 1].push(key)) && rows, []);\n  }\n  /**\r\n   * moves the tile at the given (i,j) cordinates \r\n   * to the current empty space (only if legal)\r\n   * @param {*} i row index\r\n   * @param {*} j column index\r\n   */\n\n\n  move(i, j) {\n    let legalFriends = this.getLegalFriends(i, j);\n\n    let b2c = ({\n      i,\n      j\n    }) => this.size * j + i;\n\n    let empty = null;\n\n    if (legalFriends.some(box => this.board[b2c(empty = box)] === EMPTY)) {\n      this.board.swap(b2c(empty), b2c({\n        i,\n        j\n      }));\n      return true;\n    }\n\n    return false;\n  }\n  /**\r\n  * Checks if board is in win configuration.\r\n  */\n\n\n  checkWin() {\n    let last = this.board.length - 1;\n    return !!this.board.reduce((res, cur, i) => res && (cur === i + 1 || i === last));\n  }\n  /**\r\n  * Scrambles the board randomly in a solvable way.\r\n  */\n\n\n  scramble() {\n    const SCRAMBLE_FACTOR = this.board.length * 10;\n\n    let rand = (min, max) => Math.floor(Math.random() * (max - min) + min);\n\n    let emptyIdx = this.board.indexOf(EMPTY);\n    let _ref2 = [emptyIdx % this.size, Math.floor(emptyIdx / this.size)],\n        i = _ref2[0],\n        j = _ref2[1];\n\n    let b2c = ({\n      i,\n      j\n    }) => this.size * j + i;\n\n    for (let ind = 0; ind < SCRAMBLE_FACTOR; ++ind) {\n      let legalFriends = this.getLegalFriends(i, j);\n      let friend = legalFriends[rand(0, legalFriends.length)];\n      this.board.swap(b2c(friend), b2c({\n        i,\n        j\n      }));\n      i = friend.i;\n      j = friend.j;\n    }\n\n    return this.matrix;\n  }\n  /**\r\n   * Gets all existing tiles around a given tile (i,j)\r\n   * @param {Number} i \r\n   * @param {Number} j \r\n   */\n\n\n  getLegalFriends(i, j) {\n    let friends = [{\n      i: i + 1,\n      j\n    }, {\n      i: i - 1,\n      j\n    }, {\n      i,\n      j: j + 1\n    }, {\n      i,\n      j: j - 1\n    }]; // ES6 feature :  Arrow functions + Destructing assignment\n\n    let isLegal = ({\n      i,\n      j\n    }) => i < this.size && i >= 0 && j < this.size && j >= 0;\n\n    return friends.filter(isLegal);\n  }\n\n}","map":{"version":3,"sources":["/Users/kmacaraeg/Documents/Projects/Walk off the Earth/walkofftheearth/node_modules/react-slider-game/dist/BoardLogic.js"],"names":["EMPTY","Array","prototype","swap","i","j","BoardLogic","constructor","data","DEFAULT_SIZE","isArray","size","Math","ceil","sqrt","length","board","isNaN","initBord","from","_","b","matrix","reduce","rows","key","index","push","move","legalFriends","getLegalFriends","b2c","empty","some","box","checkWin","last","res","cur","scramble","SCRAMBLE_FACTOR","rand","min","max","floor","random","emptyIdx","indexOf","ind","friend","friends","isLegal","filter"],"mappings":"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","sourcesContent":["const EMPTY = 0;\n\nArray.prototype.swap = function (i, j) {\n  // eslint-disable-line no-extend-native\n  [this[i], this[j]] = [this[j], this[i]];\n  return this;\n};\n\nexport default class BoardLogic {\n  /**\r\n   * Constructor\r\n   * @param {*} data can be one of three:\r\n   * size (number): init matrix with size number*number \r\n   * matrix: if array use given array as matrix\r\n   * other: use default size\r\n   */\n  constructor(data) {\n    const DEFAULT_SIZE = 3;\n\n    if (Array.isArray(data)) {\n      // Data is Array\n      this.size = Math.ceil(Math.sqrt(data.length));\n      this.board = [...data];\n    } else {\n      // Data is number or undefiend\n      this.size = isNaN(data) ? DEFAULT_SIZE : data;\n      this.board = this.initBord(data);\n    }\n  }\n  /**\r\n  * Gets a new board of the given size\r\n  * @param {Number} size amount of Boxes per row\r\n  */\n\n\n  initBord(size) {\n    if (size == 2) {\n      return [0, 1, 3, 2];\n    }\n\n    return Array.from({\n      length: size * size\n    }, (_, b) => b);\n  }\n  /**\r\n   * Getter, return a copy of the game board \r\n   */\n\n\n  get matrix() {\n    return this.board.reduce((rows, key, index) => (index % this.size === 0 ? rows.push([key]) : rows[rows.length - 1].push(key)) && rows, []);\n  }\n  /**\r\n   * moves the tile at the given (i,j) cordinates \r\n   * to the current empty space (only if legal)\r\n   * @param {*} i row index\r\n   * @param {*} j column index\r\n   */\n\n\n  move(i, j) {\n    let legalFriends = this.getLegalFriends(i, j);\n\n    let b2c = ({\n      i,\n      j\n    }) => this.size * j + i;\n\n    let empty = null;\n\n    if (legalFriends.some(box => this.board[b2c(empty = box)] === EMPTY)) {\n      this.board.swap(b2c(empty), b2c({\n        i,\n        j\n      }));\n      return true;\n    }\n\n    return false;\n  }\n  /**\r\n  * Checks if board is in win configuration.\r\n  */\n\n\n  checkWin() {\n    let last = this.board.length - 1;\n    return !!this.board.reduce((res, cur, i) => res && (cur === i + 1 || i === last));\n  }\n  /**\r\n  * Scrambles the board randomly in a solvable way.\r\n  */\n\n\n  scramble() {\n    const SCRAMBLE_FACTOR = this.board.length * 10;\n\n    let rand = (min, max) => Math.floor(Math.random() * (max - min) + min);\n\n    let emptyIdx = this.board.indexOf(EMPTY);\n    let [i, j] = [emptyIdx % this.size, Math.floor(emptyIdx / this.size)];\n\n    let b2c = ({\n      i,\n      j\n    }) => this.size * j + i;\n\n    for (let ind = 0; ind < SCRAMBLE_FACTOR; ++ind) {\n      let legalFriends = this.getLegalFriends(i, j);\n      let friend = legalFriends[rand(0, legalFriends.length)];\n      this.board.swap(b2c(friend), b2c({\n        i,\n        j\n      }));\n      ({\n        i,\n        j\n      } = friend);\n    }\n\n    return this.matrix;\n  }\n  /**\r\n   * Gets all existing tiles around a given tile (i,j)\r\n   * @param {Number} i \r\n   * @param {Number} j \r\n   */\n\n\n  getLegalFriends(i, j) {\n    let friends = [{\n      i: i + 1,\n      j\n    }, {\n      i: i - 1,\n      j\n    }, {\n      i,\n      j: j + 1\n    }, {\n      i,\n      j: j - 1\n    }]; // ES6 feature :  Arrow functions + Destructing assignment\n\n    let isLegal = ({\n      i,\n      j\n    }) => i < this.size && i >= 0 && j < this.size && j >= 0;\n\n    return friends.filter(isLegal);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}