{"ast":null,"code":"var _jsxFileName = \"/Users/kmacaraeg/Documents/Projects/Walk off the Earth/walk-off-the-earth/src/components/Drawing.jsx\";\nimport React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport CanvasDraw from \"../../src\";\nimport classNames from \"./drawing.css\";\n\nclass Demo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      color: \"#ffc600\",\n      width: 400,\n      height: 400,\n      brushRadius: 10,\n      lazyRadius: 12\n    };\n  }\n\n  componentDidMount() {\n    // let's change the color randomly every 2 seconds. fun!\n    window.setInterval(() => {\n      this.setState({\n        color: \"#\" + Math.floor(Math.random() * 16777215).toString(16)\n      });\n    }, 2000);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"React Canvas Draw\"), React.createElement(\"iframe\", {\n      title: \"GitHub link\",\n      src: \"https://ghbtns.com/github-btn.html?user=embiem&repo=react-canvas-draw&type=star&count=true\",\n      frameBorder: \"0\",\n      scrolling: \"0\",\n      width: \"160px\",\n      height: \"30px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"default\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"This is a simple \", React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, `<CanvasDraw />`), \" component with default values.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Try it out! Draw on this white canvas:\"), React.createElement(CanvasDraw, {\n      onChange: () => console.log(\"onChange\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Custom Brush-Color\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Let's spice things up by using custom brush colors\", \" \", React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, `<CanvasDraw brushColor={this.state.color} />`), \". We randomly change them every 2 seconds. But you could easily use a color-picker!\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Current color:\", \" \", React.createElement(\"div\", {\n      style: {\n        display: \"inline-block\",\n        width: \"24px\",\n        height: \"24px\",\n        backgroundColor: this.state.color,\n        border: \"1px solid #272727\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    })), React.createElement(CanvasDraw, {\n      brushColor: this.state.color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Background Image\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"You can also set the `imgSrc` prop to draw on a background-image.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"It will automatically resize to fit the canvas and centered vertically & horizontally.\"), React.createElement(CanvasDraw, {\n      brushColor: \"rgba(155,12,60,0.3)\",\n      imgSrc: \"https://upload.wikimedia.org/wikipedia/commons/a/a1/Nepalese_Mhapuja_Mandala.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Hide UI\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"To hide the UI elements, set the `hideInterface` prop. You can also hide the grid with the `hideGrid` prop.\"), React.createElement(CanvasDraw, {\n      hideInterface: true,\n      hideGrid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Save & Load\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"This part got me most excited. Very easy to use saving and loading of drawings. It even comes with a customizable loading speed to control whether your drawing should load instantly (loadTimeOffset = 0) or appear after some time (loadTimeOffset > 0)\", \" \", React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, `<CanvasDraw loadTimeOffset={10} />`)), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Try it out! Draw something, hit \\\"Save\\\" and then \\\"Load\\\".\"), React.createElement(\"div\", {\n      className: classNames.tools,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => {\n        localStorage.setItem(\"savedDrawing\", this.saveableCanvas.getSaveData());\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Save\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.saveableCanvas.clear();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Clear\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.saveableCanvas.undo();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Undo\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Width:\"), React.createElement(\"input\", {\n      type: \"number\",\n      value: this.state.width,\n      onChange: e => this.setState({\n        width: parseInt(e.target.value, 10)\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Height:\"), React.createElement(\"input\", {\n      type: \"number\",\n      value: this.state.height,\n      onChange: e => this.setState({\n        height: parseInt(e.target.value, 10)\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Brush-Radius:\"), React.createElement(\"input\", {\n      type: \"number\",\n      value: this.state.brushRadius,\n      onChange: e => this.setState({\n        brushRadius: parseInt(e.target.value, 10)\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Lazy-Radius:\"), React.createElement(\"input\", {\n      type: \"number\",\n      value: this.state.lazyRadius,\n      onChange: e => this.setState({\n        lazyRadius: parseInt(e.target.value, 10)\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }))), React.createElement(CanvasDraw, {\n      ref: canvasDraw => this.saveableCanvas = canvasDraw,\n      brushColor: this.state.color,\n      brushRadius: this.state.brushRadius,\n      lazyRadius: this.state.lazyRadius,\n      canvasWidth: this.state.width,\n      canvasHeight: this.state.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"The following is a disabled canvas with a hidden grid that we use to load & show your saved drawing.\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.loadableCanvas.loadSaveData(localStorage.getItem(\"savedDrawing\"));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Load what you saved previously into the following canvas. Either by calling `loadSaveData()` on the component's reference or passing it the `saveData` prop:\"), React.createElement(CanvasDraw, {\n      disabled: true,\n      hideGrid: true,\n      ref: canvasDraw => this.loadableCanvas = canvasDraw,\n      saveData: localStorage.getItem(\"savedDrawing\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"The saving & loading also takes different dimensions into account. Change the width & height, draw something and save it and then load it into the disabled canvas. It will load your previously saved masterpiece scaled to the current canvas dimensions.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"That's it for now! Take a look at the\", \" \", React.createElement(\"a\", {\n      href: \"https://github.com/mBeierl/react-canvas-draw/tree/master/demo/src\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"source code of these examples\"), \".\"));\n  }\n\n}\n\nrender(React.createElement(Demo, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 198\n  },\n  __self: this\n}), document.querySelector(\"#demo\"));","map":{"version":3,"sources":["/Users/kmacaraeg/Documents/Projects/Walk off the Earth/walk-off-the-earth/src/components/Drawing.jsx"],"names":["React","Component","render","CanvasDraw","classNames","Demo","state","color","width","height","brushRadius","lazyRadius","componentDidMount","window","setInterval","setState","Math","floor","random","toString","console","log","display","backgroundColor","border","tools","localStorage","setItem","saveableCanvas","getSaveData","clear","undo","e","parseInt","target","value","canvasDraw","loadableCanvas","loadSaveData","getItem","document","querySelector"],"mappings":"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","sourcesContent":["\nimport React, { Component } from \"react\";\nimport { render } from \"react-dom\";\n\nimport CanvasDraw from \"../../src\";\nimport classNames from \"./drawing.css\";\n\nclass Demo extends Component {\n  state = {\n    color: \"#ffc600\",\n    width: 400,\n    height: 400,\n    brushRadius: 10,\n    lazyRadius: 12\n  };\n  componentDidMount() {\n    // let's change the color randomly every 2 seconds. fun!\n    window.setInterval(() => {\n      this.setState({\n        color: \"#\" + Math.floor(Math.random() * 16777215).toString(16)\n      });\n    }, 2000);\n  }\n  render() {\n    return (\n      <div>\n        <h1>React Canvas Draw</h1>\n        <iframe\n          title=\"GitHub link\"\n          src=\"https://ghbtns.com/github-btn.html?user=embiem&repo=react-canvas-draw&type=star&count=true\"\n          frameBorder=\"0\"\n          scrolling=\"0\"\n          width=\"160px\"\n          height=\"30px\"\n        />\n        <h2>default</h2>\n        <p>\n          This is a simple <span>{`<CanvasDraw />`}</span> component with\n          default values.\n        </p>\n        <p>Try it out! Draw on this white canvas:</p>\n        <CanvasDraw onChange={() => console.log(\"onChange\")} />\n        <h2>Custom Brush-Color</h2>\n        <p>\n          Let's spice things up by using custom brush colors{\" \"}\n          <span>{`<CanvasDraw brushColor={this.state.color} />`}</span>. We\n          randomly change them every 2 seconds. But you could easily use a\n          color-picker!\n        </p>\n        <div>\n          Current color:{\" \"}\n          <div\n            style={{\n              display: \"inline-block\",\n              width: \"24px\",\n              height: \"24px\",\n              backgroundColor: this.state.color,\n              border: \"1px solid #272727\"\n            }}\n          />\n        </div>\n        <CanvasDraw brushColor={this.state.color} />\n        <h2>Background Image</h2>\n        <p>You can also set the `imgSrc` prop to draw on a background-image.</p>\n        <p>\n          It will automatically resize to fit the canvas and centered vertically\n          & horizontally.\n        </p>\n        <CanvasDraw\n          brushColor=\"rgba(155,12,60,0.3)\"\n          imgSrc=\"https://upload.wikimedia.org/wikipedia/commons/a/a1/Nepalese_Mhapuja_Mandala.jpg\"\n        />\n        <h2>Hide UI</h2>\n        <p>To hide the UI elements, set the `hideInterface` prop. You can also hide the grid with the `hideGrid` prop.</p>\n        <CanvasDraw hideInterface hideGrid />\n        <h2>Save & Load</h2>\n        <p>\n          This part got me most excited. Very easy to use saving and loading of\n          drawings. It even comes with a customizable loading speed to control\n          whether your drawing should load instantly (loadTimeOffset = 0) or\n          appear after some time (loadTimeOffset > 0){\" \"}\n          <span>{`<CanvasDraw loadTimeOffset={10} />`}</span>\n        </p>\n        <p>Try it out! Draw something, hit \"Save\" and then \"Load\".</p>\n        <div className={classNames.tools}>\n          <button\n            onClick={() => {\n              localStorage.setItem(\n                \"savedDrawing\",\n                this.saveableCanvas.getSaveData()\n              );\n            }}\n          >\n            Save\n          </button>\n          <button\n            onClick={() => {\n              this.saveableCanvas.clear();\n            }}\n          >\n            Clear\n          </button>\n          <button\n            onClick={() => {\n              this.saveableCanvas.undo();\n            }}\n          >\n            Undo\n          </button>\n          <div>\n            <label>Width:</label>\n            <input\n              type=\"number\"\n              value={this.state.width}\n              onChange={e =>\n                this.setState({ width: parseInt(e.target.value, 10) })\n              }\n            />\n          </div>\n          <div>\n            <label>Height:</label>\n            <input\n              type=\"number\"\n              value={this.state.height}\n              onChange={e =>\n                this.setState({ height: parseInt(e.target.value, 10) })\n              }\n            />\n          </div>\n          <div>\n            <label>Brush-Radius:</label>\n            <input\n              type=\"number\"\n              value={this.state.brushRadius}\n              onChange={e =>\n                this.setState({ brushRadius: parseInt(e.target.value, 10) })\n              }\n            />\n          </div>\n          <div>\n            <label>Lazy-Radius:</label>\n            <input\n              type=\"number\"\n              value={this.state.lazyRadius}\n              onChange={e =>\n                this.setState({ lazyRadius: parseInt(e.target.value, 10) })\n              }\n            />\n          </div>\n        </div>\n        <CanvasDraw\n          ref={canvasDraw => (this.saveableCanvas = canvasDraw)}\n          brushColor={this.state.color}\n          brushRadius={this.state.brushRadius}\n          lazyRadius={this.state.lazyRadius}\n          canvasWidth={this.state.width}\n          canvasHeight={this.state.height}\n        />\n        <p>\n          The following is a disabled canvas with a hidden grid that we use to\n          load & show your saved drawing.\n        </p>\n        <button\n          onClick={() => {\n            this.loadableCanvas.loadSaveData(\n              localStorage.getItem(\"savedDrawing\")\n            );\n          }}\n        >\n          Load what you saved previously into the following canvas. Either by\n          calling `loadSaveData()` on the component's reference or passing it\n          the `saveData` prop:\n        </button>\n        <CanvasDraw\n          disabled\n          hideGrid\n          ref={canvasDraw => (this.loadableCanvas = canvasDraw)}\n          saveData={localStorage.getItem(\"savedDrawing\")}\n        />\n        <p>\n          The saving & loading also takes different dimensions into account.\n          Change the width & height, draw something and save it and then load it\n          into the disabled canvas. It will load your previously saved\n          masterpiece scaled to the current canvas dimensions.\n        </p>\n        <p>\n          That's it for now! Take a look at the{\" \"}\n          <a href=\"https://github.com/mBeierl/react-canvas-draw/tree/master/demo/src\">\n            source code of these examples\n          </a>\n          .\n        </p>\n      </div>\n    );\n  }\n}\n\nrender(<Demo />, document.querySelector(\"#demo\"));"]},"metadata":{},"sourceType":"module"}