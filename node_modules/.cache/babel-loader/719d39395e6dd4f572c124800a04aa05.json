{"ast":null,"code":"var _jsxFileName = \"/Users/kmacaraeg/Documents/Projects/Walk off the Earth/walkofftheearth/src/App.js\";\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Crossword from \"react-crossword\";\nimport Slider from \"react-slider-game\";\nimport ReactCompareImage from 'react-compare-image';\nimport tourStops from './components/data/tourStops.jsx';\nimport MemoryGame from \"react-memory-game\";\nimport mapVector from './components/mapVector';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport './App.css';\nconst Scoreboard = styled.div`\n\n  padding: 40px;\n  position: fixed;\n  left: 0;\n  bottom: 0;\n  // background-color: lightblue;\n  display: flex;\n\n`;\nconst Badge = styled.div`\n\n  padding: 20px;\n  // background-color: ${props => props.color || \"red\"}\n\n`;\nconst MapContainer = styled.div`\n\n  background-image: url(img/background.jpg);\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n\n`;\nconst Map = styled.div`\n\n  // background-color: orange;\n  // border: 1px solid red;\n  height: 600px;\n  width: 1200px;\n  display: flex;\n\n`;\nconst MapListItem = styled.div`\n\n  // background-color: gray;\n  min-height: 40px;\n  margin: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n\n`;\nconst RenderMapList = styled.div`\n\n  overflow: scroll;\n\n`;\nconst TourStopList = styled.div`\n\n  overflow: scroll;\n  width: 400px;\n  background-color: white;\n  padding-left: 10px;\n\n`;\nconst MapRender = styled.div`\n\n  padding: 15px;\n  background-color: ${props => props.gameColor};\n  height: 100$;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  display:flex;\n  flex-direction: column;\n\n`; // const CompleteGameButton = styled.div`\n//   display: ${props => (props.currentGame == \"home\" ? \"none\" : \"block\")};\n//   margin: 20px;\n//   padding: 20px;\n//   background-color: white;\n// `\n\nconst GameWrap = styled.div`\n\n  height: 100%;\n  width: 100%;\n  // background-color: red;\n\n`;\nconst MapListBadgeCrossword = styled.div`\n\n  height: 40px;\n  width: 40px;\n  background-color:  blue;\n\n`;\nconst MapListBadgeColoring = styled.div`\n\n  height: 40px;\n  width: 40px;\n  background-color:  orange;\n\n`;\nconst MapListBadgeMemory = styled.div`\n\n  height: 40px;\n  width: 40px;\n  background-color:  yellow;\n\n`;\nconst MapListBadgeCompare = styled.div`\n\n  height: 40px;\n  width: 40px;\n  background-color:  pink;\n\n`;\nconst MapListBadgeSlider = styled.div`\n\n  height: 40px;\n  width: 40px;\n  background-color:  gray;\n\n`;\nconst Wrap = styled.div`\n  font-size: 120px;\n`;\nconst GameContainer = styled.div`\n\n  display: flex;\n\n  `;\nconst PanelContainer = styled.div`\n  width: 200px;\n  order: -1;\n`;\nconst BoardContainer = styled.div`\n  flex: 1;\n`;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      score: 0,\n      completedCrosswords: 0,\n      completedWaldo: 0,\n      completedPuzzle: 0,\n      completedColoring: 0,\n      completedMemory: 0,\n      gameStart: true,\n      gameCompleted: false,\n      currentGame: \"home\",\n      currentCity: \"no city\",\n      currentState: \"no state\",\n      currentDate: \"no date\",\n      currentDate: \"no data\"\n    };\n\n    this.componentDidMount = () => {};\n\n    this.componentDidUpdate = () => {\n      // console.log(this.state.currentGame)\n      // check badges\n      // if badges are complete\n      // Change gameCompleted\n      // GivePrize\n      if (this.state.completedColoring > 0 && this.state.completedCrosswords > 0 && this.state.completedWaldo > 0 && this.state.completedPuzzle > 0) {\n        alert(\"congratulations!\");\n      }\n    };\n\n    this.finishGame = () => {\n      this.setState({\n        gameCompleted: true\n      });\n    };\n\n    this.changeGame = (game, city, state, date, data) => {\n      const newGame = game;\n      const newCity = city;\n      const newState = state;\n      const newDate = date;\n      const newData = data;\n      this.setState({\n        currentGame: newGame\n      });\n      this.setState({\n        currentCity: newCity\n      });\n      this.setState({\n        currentAction: newState\n      });\n      this.setState({\n        currentDate: newDate\n      });\n      this.setState({\n        currentData: newData\n      });\n      console.log(\"game change \" + this.state.currentGame);\n    };\n\n    this.gameColor = arg => {\n      console.log(\"current game = \" + arg);\n      const expr = arg;\n\n      switch (expr) {\n        case \"crossword\":\n          return \"blue\";\n          break;\n\n        case \"coloring\":\n          return \"orange\";\n          break;\n\n        case \"memory\":\n          return \"yellow\";\n          break;\n\n        case \"compare\":\n          return \"pink\";\n          break;\n\n        case \"slider\":\n          return \"gray\";\n          break;\n\n        case \"home\":\n          return \"lightblue\";\n          break;\n      }\n    };\n\n    this.completeCurrentGame = arg => {\n      const expr = arg;\n      console.log(\"complete current game \" + expr);\n\n      switch (expr) {\n        case \"crossword\":\n          this.setState({\n            currentGame: \"home\"\n          });\n          this.setState({\n            currentCity: \"no city\"\n          });\n          this.setState({\n            completedCrosswords: this.state.completedCrosswords + 1\n          });\n          return;\n          break;\n\n        case \"coloring\":\n          this.setState({\n            currentGame: \"home\"\n          });\n          this.setState({\n            currentCity: \"no city\"\n          });\n          this.setState({\n            completedColoring: this.state.completedMemory + 1\n          });\n          return;\n          break;\n\n        case \"memory\":\n          this.setState({\n            currentGame: \"home\"\n          });\n          this.setState({\n            currentCity: \"no city\"\n          });\n          this.setState({\n            completedColoring: this.state.completedColoring + 1\n          });\n          return;\n          break;\n\n        case \"compare\":\n          this.setState({\n            currentGame: \"home\"\n          });\n          this.setState({\n            currentCity: \"no city\"\n          });\n          this.setState({\n            completedWaldo: this.state.completedWaldo + 1\n          });\n          return;\n          break;\n\n        case \"slider\":\n          this.setState({\n            currentGame: \"home\"\n          });\n          this.setState({\n            currentCity: \"no city\"\n          });\n          this.setState({\n            completedPuzzle: this.state.completedPuzzle + 1\n          });\n          return;\n          break;\n      }\n    };\n\n    this.renderGame = (arg, data) => {\n      const expr = arg; // console.log(\"complete current game \" + expr)\n\n      switch (expr) {\n        case \"home\":\n          return mapVector();\n\n        case \"crossword\":\n          return React.createElement(Crossword, {\n            data: this.state.currentData,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 297\n            },\n            __self: this\n          });\n          break;\n\n        case \"coloring\":\n          return;\n          break;\n\n        case \"compare\":\n          return React.createElement(ReactCompareImage, {\n            leftImage: \"\",\n            rightImage: \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 303\n            },\n            __self: this\n          });\n          break;\n\n        case \"slider\":\n          return React.createElement(Slider, {\n            size: 2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 306\n            },\n            __self: this\n          });\n          break;\n      }\n    };\n\n    this.renderMapListBadge = arg => {\n      const expr = arg;\n\n      switch (expr) {\n        case \"crossword\":\n          return React.createElement(MapListBadgeCrossword, {\n            type: expr,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 317\n            },\n            __self: this\n          });\n\n        case \"coloring\":\n          return React.createElement(MapListBadgeColoring, {\n            type: expr,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 319\n            },\n            __self: this\n          });\n\n        case \"memory\":\n          return React.createElement(MapListBadgeMemory, {\n            type: expr,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 321\n            },\n            __self: this\n          });\n\n        case \"compare\":\n          return React.createElement(MapListBadgeCompare, {\n            type: expr,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 323\n            },\n            __self: this\n          });\n\n        case \"slider\":\n          return React.createElement(MapListBadgeSlider, {\n            type: expr,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 325\n            },\n            __self: this\n          });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(Scoreboard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, React.createElement(Badge, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, this.state.completedCrosswords), React.createElement(Badge, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, this.state.completedColoring), React.createElement(Badge, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, this.state.completedMemory), React.createElement(Badge, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, this.state.completedWaldo), React.createElement(Badge, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, this.state.completedPuzzle)), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, React.createElement(MapContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, React.createElement(Map, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, React.createElement(TourStopList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, React.createElement(RenderMapList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, tourStops && tourStops.map((x, i) => React.createElement(MapListItem, {\n      soma: true,\n      onClick: this.changeGame.bind(this, x.game, x.city, x.state, x.date, x.data),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, x.city, \".\", x.date1, \" / \", x.date2), this.renderMapListBadge(x.game))))), React.createElement(MapRender, {\n      currentGame: this.state.currentGame,\n      gameColor: this.gameColor(this.state.currentGame),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, React.createElement(GameWrap, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, this.renderGame(this.state.currentGame)))))), React.createElement(Route, {\n      path: \"/map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/*\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kmacaraeg/Documents/Projects/Walk off the Earth/walkofftheearth/src/App.js"],"names":["React","Component","styled","Crossword","Slider","ReactCompareImage","tourStops","MemoryGame","mapVector","BrowserRouter","Router","Switch","Route","Link","Scoreboard","div","Badge","props","color","MapContainer","Map","MapListItem","RenderMapList","TourStopList","MapRender","gameColor","GameWrap","MapListBadgeCrossword","MapListBadgeColoring","MapListBadgeMemory","MapListBadgeCompare","MapListBadgeSlider","Wrap","GameContainer","PanelContainer","BoardContainer","App","state","score","completedCrosswords","completedWaldo","completedPuzzle","completedColoring","completedMemory","gameStart","gameCompleted","currentGame","currentCity","currentState","currentDate","componentDidMount","componentDidUpdate","alert","finishGame","setState","changeGame","game","city","date","data","newGame","newCity","newState","newDate","newData","currentAction","currentData","console","log","arg","expr","completeCurrentGame","renderGame","renderMapListBadge","render","map","x","i","bind","date1","date2"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AAEA,SACEC,aAAa,IAAIC,MADnB,EAEEC,MAFF,EAGEC,KAHF,EAIEC,IAJF,QAKO,kBALP;AAMA,OAAO,WAAP;AAEA,MAAMC,UAAU,GAAGZ,MAAM,CAACa,GAAI;;;;;;;;;CAA9B;AAUA,MAAMC,KAAK,GAAGd,MAAM,CAACa,GAAI;;;yBAGAE,KAAK,IAAIA,KAAK,CAACC,KAAN,IAAe,KAAM;;CAHvD;AAOA,MAAMC,YAAY,GAAGjB,MAAM,CAACa,GAAI;;;;;;;;;;CAAhC;AAYA,MAAMK,GAAG,GAAGlB,MAAM,CAACa,GAAI;;;;;;;;CAAvB;AAUA,MAAMM,WAAW,GAAGnB,MAAM,CAACa,GAAI;;;;;;;;;;CAA/B;AAYA,MAAMO,aAAa,GAAGpB,MAAM,CAACa,GAAI;;;;CAAjC;AAMA,MAAMQ,YAAY,GAAGrB,MAAM,CAACa,GAAI;;;;;;;CAAhC;AASA,MAAMS,SAAS,GAAGtB,MAAM,CAACa,GAAI;;;sBAGPE,KAAK,IAAIA,KAAK,CAACQ,SAAU;;;;;;;;CAH/C,C,CAaA;AAEA;AACA;AACA;AACA;AAEA;;AAEA,MAAMC,QAAQ,GAAExB,MAAM,CAACa,GAAI;;;;;;CAA3B;AAQA,MAAMY,qBAAqB,GAAGzB,MAAM,CAACa,GAAI;;;;;;CAAzC;AAQA,MAAMa,oBAAoB,GAAG1B,MAAM,CAACa,GAAI;;;;;;CAAxC;AAOA,MAAMc,kBAAkB,GAAG3B,MAAM,CAACa,GAAI;;;;;;CAAtC;AAOA,MAAMe,mBAAmB,GAAG5B,MAAM,CAACa,GAAI;;;;;;CAAvC;AAOA,MAAMgB,kBAAkB,GAAG7B,MAAM,CAACa,GAAI;;;;;;CAAtC;AAQA,MAAMiB,IAAI,GAAG9B,MAAM,CAACa,GAAI;;CAAxB;AAIA,MAAMkB,aAAa,GAAG/B,MAAM,CAACa,GAAI;;;;GAAjC;AAMA,MAAMmB,cAAc,GAAGhC,MAAM,CAACa,GAAI;;;CAAlC;AAKA,MAAMoB,cAAc,GAAGjC,MAAM,CAACa,GAAI;;CAAlC;;AAIA,MAAMqB,GAAN,SAAkBnC,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BoC,KAF0B,GAElB;AACNC,MAAAA,KAAK,EAAE,CADD;AAGNC,MAAAA,mBAAmB,EAAE,CAHf;AAINC,MAAAA,cAAc,EAAE,CAJV;AAKNC,MAAAA,eAAe,EAAE,CALX;AAMNC,MAAAA,iBAAiB,EAAE,CANb;AAONC,MAAAA,eAAe,EAAE,CAPX;AAQNC,MAAAA,SAAS,EAAE,IARL;AASNC,MAAAA,aAAa,EAAE,KATT;AAWNC,MAAAA,WAAW,EAAE,MAXP;AAYNC,MAAAA,WAAW,EAAE,SAZP;AAaNC,MAAAA,YAAY,EAAE,UAbR;AAcNC,MAAAA,WAAW,EAAE,SAdP;AAeNA,MAAAA,WAAW,EAAE;AAfP,KAFkB;;AAAA,SAoB1BC,iBApB0B,GAoBN,MAAM,CAIzB,CAxByB;;AAAA,SA0B1BC,kBA1B0B,GA0BL,MAAM;AACzB;AAEA;AACA;AACA;AACA;AAEA,UAAI,KAAKd,KAAL,CAAWK,iBAAX,GAA+B,CAA/B,IAAoC,KAAKL,KAAL,CAAWE,mBAAX,GAAiC,CAArE,IAA0E,KAAKF,KAAL,CAAWG,cAAX,GAA4B,CAAtG,IAA2G,KAAKH,KAAL,CAAWI,eAAX,GAA6B,CAA5I,EAA+I;AAC7IW,QAAAA,KAAK,CAAC,kBAAD,CAAL;AACD;AAEF,KAtCyB;;AAAA,SAwC1BC,UAxC0B,GAwCb,MAAM;AACjB,WAAKC,QAAL,CAAc;AAAET,QAAAA,aAAa,EAAE;AAAjB,OAAd;AACD,KA1CyB;;AAAA,SA4C1BU,UA5C0B,GA4Cb,CAACC,IAAD,EAAOC,IAAP,EAAapB,KAAb,EAAoBqB,IAApB,EAA0BC,IAA1B,KAAmC;AAC9C,YAAMC,OAAO,GAAGJ,IAAhB;AACA,YAAMK,OAAO,GAAGJ,IAAhB;AACA,YAAMK,QAAQ,GAAGzB,KAAjB;AACA,YAAM0B,OAAO,GAAGL,IAAhB;AACA,YAAMM,OAAO,GAAGL,IAAhB;AACA,WAAKL,QAAL,CAAc;AAAER,QAAAA,WAAW,EAAEc;AAAf,OAAd;AACA,WAAKN,QAAL,CAAc;AAAEP,QAAAA,WAAW,EAAEc;AAAf,OAAd;AACA,WAAKP,QAAL,CAAc;AAAEW,QAAAA,aAAa,EAAEH;AAAjB,OAAd;AACA,WAAKR,QAAL,CAAc;AAAEL,QAAAA,WAAW,EAAEc;AAAf,OAAd;AACA,WAAKT,QAAL,CAAc;AAAEY,QAAAA,WAAW,EAAEF;AAAf,OAAd;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiB,KAAK/B,KAAL,CAAWS,WAAxC;AACD,KAxDyB;;AAAA,SA0D1BrB,SA1D0B,GA0Db4C,GAAD,IAAS;AACnBF,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBC,GAAhC;AACA,YAAMC,IAAI,GAAGD,GAAb;;AACA,cAAQC,IAAR;AACE,aAAK,WAAL;AACE,iBAAO,MAAP;AACA;;AACF,aAAK,UAAL;AACE,iBAAO,QAAP;AACA;;AACF,aAAK,QAAL;AACI,iBAAO,QAAP;AACA;;AACJ,aAAK,SAAL;AACE,iBAAO,MAAP;AACA;;AACF,aAAK,QAAL;AACE,iBAAO,MAAP;AACA;;AACF,aAAK,MAAL;AACE,iBAAO,WAAP;AACA;AAlBJ;AAoBD,KAjFyB;;AAAA,SAmF1BC,mBAnF0B,GAmFHF,GAAD,IAAS;AAC7B,YAAMC,IAAI,GAAGD,GAAb;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BE,IAAvC;;AACA,cAAQA,IAAR;AACE,aAAK,WAAL;AACE,eAAKhB,QAAL,CAAc;AAAER,YAAAA,WAAW,EAAE;AAAf,WAAd;AACA,eAAKQ,QAAL,CAAc;AAAEP,YAAAA,WAAW,EAAE;AAAf,WAAd;AACA,eAAKO,QAAL,CAAc;AAAEf,YAAAA,mBAAmB,EAAG,KAAKF,KAAL,CAAWE,mBAAX,GAAiC;AAAzD,WAAd;AACA;AACA;;AACF,aAAK,UAAL;AACE,eAAKe,QAAL,CAAc;AAAER,YAAAA,WAAW,EAAE;AAAf,WAAd;AACA,eAAKQ,QAAL,CAAc;AAAEP,YAAAA,WAAW,EAAE;AAAf,WAAd;AACA,eAAKO,QAAL,CAAc;AAAEZ,YAAAA,iBAAiB,EAAG,KAAKL,KAAL,CAAWM,eAAX,GAA6B;AAAnD,WAAd;AACA;AACA;;AACF,aAAK,QAAL;AACI,eAAKW,QAAL,CAAc;AAAER,YAAAA,WAAW,EAAE;AAAf,WAAd;AACA,eAAKQ,QAAL,CAAc;AAAEP,YAAAA,WAAW,EAAE;AAAf,WAAd;AACA,eAAKO,QAAL,CAAc;AAAEZ,YAAAA,iBAAiB,EAAG,KAAKL,KAAL,CAAWK,iBAAX,GAA+B;AAArD,WAAd;AACA;AACA;;AACJ,aAAK,SAAL;AACE,eAAKY,QAAL,CAAc;AAAER,YAAAA,WAAW,EAAE;AAAf,WAAd;AACA,eAAKQ,QAAL,CAAc;AAAEP,YAAAA,WAAW,EAAE;AAAf,WAAd;AACA,eAAKO,QAAL,CAAc;AAAEd,YAAAA,cAAc,EAAG,KAAKH,KAAL,CAAWG,cAAX,GAA4B;AAA/C,WAAd;AACA;AACA;;AACF,aAAK,QAAL;AACE,eAAKc,QAAL,CAAc;AAAER,YAAAA,WAAW,EAAE;AAAf,WAAd;AACA,eAAKQ,QAAL,CAAc;AAAEP,YAAAA,WAAW,EAAE;AAAf,WAAd;AACA,eAAKO,QAAL,CAAc;AAAEb,YAAAA,eAAe,EAAG,KAAKJ,KAAL,CAAWI,eAAX,GAA6B;AAAjD,WAAd;AACA;AACA;AA9BJ;AAgCD,KAtHyB;;AAAA,SAwH1B+B,UAxH0B,GAwHb,CAACH,GAAD,EAAMV,IAAN,KAAe;AAC1B,YAAMW,IAAI,GAAGD,GAAb,CAD0B,CAE1B;;AACA,cAAQC,IAAR;AACE,aAAK,MAAL;AACE,iBAAO9D,SAAS,EAAhB;;AACF,aAAK,WAAL;AACE,iBAAO,oBAAC,SAAD;AAAW,YAAA,IAAI,EAAE,KAAK6B,KAAL,CAAW6B,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACA;;AACF,aAAK,UAAL;AACE;AACA;;AACF,aAAK,SAAL;AACE,iBAAO,oBAAC,iBAAD;AAAmB,YAAA,SAAS,EAAC,EAA7B;AAAgC,YAAA,UAAU,EAAC,EAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACA;;AACF,aAAK,QAAL;AACE,iBAAO,oBAAC,MAAD;AAAQ,YAAA,IAAI,EAAE,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACA;AAdJ;AAkBD,KA7IyB;;AAAA,SA+I1BO,kBA/I0B,GA+IJJ,GAAD,IAAS;AAC5B,YAAMC,IAAI,GAAGD,GAAb;;AACA,cAAQC,IAAR;AACE,aAAK,WAAL;AACE,iBAAO,oBAAC,qBAAD;AAAuB,YAAA,IAAI,EAAEA,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;;AACF,aAAK,UAAL;AACE,iBAAO,oBAAC,oBAAD;AAAsB,YAAA,IAAI,EAAEA,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;;AACA,aAAK,QAAL;AACE,iBAAO,oBAAC,kBAAD;AAAoB,YAAA,IAAI,EAAEA,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;;AACJ,aAAK,SAAL;AACE,iBAAO,oBAAC,mBAAD;AAAqB,YAAA,IAAI,EAAEA,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;;AACF,aAAK,QAAL;AACE,iBAAO,oBAAC,kBAAD;AAAoB,YAAA,IAAI,EAAEA,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAVJ;AAaD,KA9JyB;AAAA;;AAkK1BI,EAAAA,MAAM,GAAG;AAEP,WACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQ,KAAKrC,KAAL,CAAWE,mBAAnB,CAFF,EAGE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQ,KAAKF,KAAL,CAAWK,iBAAnB,CAHF,EAIE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQ,KAAKL,KAAL,CAAWM,eAAnB,CAJF,EAKE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQ,KAAKN,KAAL,CAAWG,cAAnB,CALF,EAME,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQ,KAAKH,KAAL,CAAWI,eAAnB,CANF,CAFF,EAWE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEGnC,SAAS,IAAIA,SAAS,CAACqE,GAAV,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAC1B,oBAAC,WAAD;AAAa,MAAA,IAAI,MAAjB;AAAkB,MAAA,OAAO,EACvB,KAAKtB,UAAL,CAAgBuB,IAAhB,CAAqB,IAArB,EAA2BF,CAAC,CAACpB,IAA7B,EAAmCoB,CAAC,CAACnB,IAArC,EAA2CmB,CAAC,CAACvC,KAA7C,EAAoDuC,CAAC,CAAClB,IAAtD,EAA4DkB,CAAC,CAACjB,IAA9D,CADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMiB,CAAC,CAACnB,IAAR,OAAemB,CAAC,CAACG,KAAjB,SAA2BH,CAAC,CAACI,KAA7B,CAFN,EAIA,KAAKP,kBAAL,CAAwBG,CAAC,CAACpB,IAA1B,CAJA,CADY,CAFhB,CADF,CAFF,EAkBE,oBAAC,SAAD;AAAW,MAAA,WAAW,EAAE,KAAKnB,KAAL,CAAWS,WAAnC;AAAgD,MAAA,SAAS,EAAE,KAAKrB,SAAL,CAAe,KAAKY,KAAL,CAAWS,WAA1B,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEG,KAAK0B,UAAL,CAAgB,KAAKnC,KAAL,CAAWS,WAA3B,CAFH,CADF,CAlBF,CAFF,CAFF,CAFF,EA0CE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1CF,EA4CE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5CF,CAXF,CADF,CADF;AAiED;;AArOyB;;AAwO5B,eAAeV,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Crossword from \"react-crossword\";\nimport Slider from \"react-slider-game\";\nimport ReactCompareImage from 'react-compare-image';\nimport tourStops from './components/data/tourStops.jsx';\nimport MemoryGame from \"react-memory-game\";\nimport mapVector from './components/mapVector'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\n\nconst Scoreboard = styled.div`\n\n  padding: 40px;\n  position: fixed;\n  left: 0;\n  bottom: 0;\n  // background-color: lightblue;\n  display: flex;\n\n`\nconst Badge = styled.div`\n\n  padding: 20px;\n  // background-color: ${props => props.color || \"red\"}\n\n`\n\nconst MapContainer = styled.div`\n\n  background-image: url(img/background.jpg);\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n\n`\n\nconst Map = styled.div`\n\n  // background-color: orange;\n  // border: 1px solid red;\n  height: 600px;\n  width: 1200px;\n  display: flex;\n\n`\n\nconst MapListItem = styled.div`\n\n  // background-color: gray;\n  min-height: 40px;\n  margin: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n\n`\n\nconst RenderMapList = styled.div`\n\n  overflow: scroll;\n\n`\n\nconst TourStopList = styled.div`\n\n  overflow: scroll;\n  width: 400px;\n  background-color: white;\n  padding-left: 10px;\n\n`\n\nconst MapRender = styled.div`\n\n  padding: 15px;\n  background-color: ${props => props.gameColor};\n  height: 100$;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  display:flex;\n  flex-direction: column;\n\n`\n\n// const CompleteGameButton = styled.div`\n\n//   display: ${props => (props.currentGame == \"home\" ? \"none\" : \"block\")};\n//   margin: 20px;\n//   padding: 20px;\n//   background-color: white;\n\n// `\n\nconst GameWrap= styled.div`\n\n  height: 100%;\n  width: 100%;\n  // background-color: red;\n\n`\n\nconst MapListBadgeCrossword = styled.div`\n\n  height: 40px;\n  width: 40px;\n  background-color:  blue;\n\n`\n\nconst MapListBadgeColoring = styled.div`\n\n  height: 40px;\n  width: 40px;\n  background-color:  orange;\n\n`\nconst MapListBadgeMemory = styled.div`\n\n  height: 40px;\n  width: 40px;\n  background-color:  yellow;\n\n`\nconst MapListBadgeCompare = styled.div`\n\n  height: 40px;\n  width: 40px;\n  background-color:  pink;\n\n`\nconst MapListBadgeSlider = styled.div`\n\n  height: 40px;\n  width: 40px;\n  background-color:  gray;\n\n`\n\nconst Wrap = styled.div`\n  font-size: 120px;\n`;\n\nconst GameContainer = styled.div`\n\n  display: flex;\n\n  `\n\nconst PanelContainer = styled.div`\n  width: 200px;\n  order: -1;\n`;\n\nconst BoardContainer = styled.div`\n  flex: 1;\n`;\n\nclass App extends Component {\n\n  state = {\n    score: 0,\n\n    completedCrosswords: 0,\n    completedWaldo: 0,\n    completedPuzzle: 0,\n    completedColoring: 0,\n    completedMemory: 0,\n    gameStart: true,\n    gameCompleted: false,\n\n    currentGame: \"home\",\n    currentCity: \"no city\",\n    currentState: \"no state\",\n    currentDate: \"no date\",\n    currentDate: \"no data\",\n  }\n\n  componentDidMount = () => {\n\n\n\n  }\n\n  componentDidUpdate = () => {\n    // console.log(this.state.currentGame)\n\n    // check badges\n    // if badges are complete\n    // Change gameCompleted\n    // GivePrize\n\n    if (this.state.completedColoring > 0 && this.state.completedCrosswords > 0 && this.state.completedWaldo > 0 && this.state.completedPuzzle > 0) {\n      alert(\"congratulations!\")\n    }\n\n  }\n\n  finishGame = () => {\n    this.setState({ gameCompleted: true });\n  }\n\n  changeGame = (game, city, state, date, data) => {\n    const newGame = game;\n    const newCity = city;\n    const newState = state;\n    const newDate = date;\n    const newData = data;\n    this.setState({ currentGame: newGame });\n    this.setState({ currentCity: newCity });\n    this.setState({ currentAction: newState });\n    this.setState({ currentDate: newDate });\n    this.setState({ currentData: newData });\n    console.log(\"game change \" + this.state.currentGame);\n  }\n\n  gameColor = (arg) => {\n    console.log(\"current game = \" + arg)\n    const expr = arg\n    switch (expr) {\n      case \"crossword\":\n        return \"blue\";\n        break;\n      case \"coloring\":\n        return \"orange\";\n        break;\n      case \"memory\":\n          return \"yellow\";\n          break;\n      case \"compare\":\n        return \"pink\";\n        break;\n      case \"slider\":\n        return \"gray\";\n        break;\n      case \"home\":\n        return \"lightblue\";\n        break;\n    }\n  }\n\n  completeCurrentGame = (arg) => {\n    const expr = arg\n    console.log(\"complete current game \" + expr)\n    switch (expr) {\n      case \"crossword\":\n        this.setState({ currentGame: \"home\" });\n        this.setState({ currentCity: \"no city\" });\n        this.setState({ completedCrosswords: (this.state.completedCrosswords + 1) })\n        return;\n        break;\n      case \"coloring\":\n        this.setState({ currentGame: \"home\" });\n        this.setState({ currentCity: \"no city\" });\n        this.setState({ completedColoring: (this.state.completedMemory + 1) })\n        return;\n        break;\n      case \"memory\":\n          this.setState({ currentGame: \"home\" });\n          this.setState({ currentCity: \"no city\" });\n          this.setState({ completedColoring: (this.state.completedColoring + 1) })\n          return;\n          break;\n      case \"compare\":\n        this.setState({ currentGame: \"home\" });\n        this.setState({ currentCity: \"no city\" });\n        this.setState({ completedWaldo: (this.state.completedWaldo + 1) })\n        return;\n        break;\n      case \"slider\":\n        this.setState({ currentGame: \"home\" });\n        this.setState({ currentCity: \"no city\" });\n        this.setState({ completedPuzzle: (this.state.completedPuzzle + 1) })\n        return;\n        break;\n    }\n  }\n\n  renderGame = (arg, data) => {\n    const expr = arg\n    // console.log(\"complete current game \" + expr)\n    switch (expr) {\n      case \"home\":\n        return mapVector()\n      case \"crossword\":\n        return <Crossword data={this.state.currentData}/>;\n        break;\n      case \"coloring\":\n        return;\n        break;\n      case \"compare\":\n        return <ReactCompareImage leftImage=\"\" rightImage=\"\"/>\n        break;\n      case \"slider\":\n        return <Slider size={2}/>;\n        break;\n    }\n\n\n  }\n\n  renderMapListBadge = (arg) => {\n    const expr = arg\n    switch (expr) {\n      case \"crossword\":\n        return <MapListBadgeCrossword type={expr} />;\n      case \"coloring\":\n        return <MapListBadgeColoring type={expr} />;\n        case \"memory\":\n          return <MapListBadgeMemory type={expr} />;\n      case \"compare\":\n        return <MapListBadgeCompare type={expr} />;\n      case \"slider\":\n        return <MapListBadgeSlider type={expr} />;\n        \n    }\n  }\n\n  \n\n  render() {\n\n    return (\n      <Router>\n        <div>\n\n          <Scoreboard>\n            {/* <RenderBadges gameStatus={gameStatus} badges={this.state.badges} /> */}\n            <Badge>{this.state.completedCrosswords}</Badge>\n            <Badge>{this.state.completedColoring}</Badge>\n            <Badge>{this.state.completedMemory}</Badge>\n            <Badge>{this.state.completedWaldo}</Badge>\n            <Badge>{this.state.completedPuzzle}</Badge>\n          </Scoreboard>\n\n          <Switch>\n\n            <Route exact path=\"/\">\n\n              <MapContainer>\n\n                <Map>\n\n                  <TourStopList>\n                    <RenderMapList>\n\n                      {tourStops && tourStops.map((x, i) => (\n                        <MapListItem soma onClick={\n                          this.changeGame.bind(this, x.game, x.city, x.state, x.date, x.data)\n                          }  ><div>{x.city}.{x.date1} / {x.date2}\n                        </div>\n                       {this.renderMapListBadge(x.game)}\n                        </MapListItem>\n                      ))\n                      }\n\n                    </RenderMapList>\n                  </TourStopList>\n\n                  <MapRender currentGame={this.state.currentGame} gameColor={this.gameColor(this.state.currentGame)}>\n                    <GameWrap>\n                    {/* {this.state.currentCity} */}\n                      {this.renderGame(this.state.currentGame)}\n\n                    </GameWrap>\n                    {/* <CompleteGameButton currentGame={this.state.currentGame} onClick={() => { this.completeCurrentGame(this.state.currentGame) }}>\n\n                      complete game</CompleteGameButton> */}\n\n                  </MapRender>\n\n                </Map>\n\n              </MapContainer>\n\n            </Route>\n\n            <Route path=\"/map\">\n            </Route>\n            <Route path=\"/*\">\n            </Route>\n          </Switch>\n\n        </div>\n\n      </Router>\n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}