{"ast":null,"code":"var _jsxFileName = \"/Users/kmacaraeg/Documents/Projects/Walk off the Earth/walk-off-the-earth/src/App.js\";\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Crossword from \"react-crossword\";\nimport Slider from \"react-slider-game\";\nimport ReactCompareImage from 'react-compare-image';\nimport tourStops from './components/data/tourStops.jsx'; // import MemoryGame from \"react-memory-game\";\n\nimport mapVector from './components/mapVector';\nimport MemoryGame from \"./components/memoryGame\"; // import Drawing, { brushCustom } from 'react-drawing';\n\nimport CanvasDraw from \"react-canvas-draw\";\nimport CompareImgInput from \"./components/CompareImgInput\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport './App.css';\nconst Scoreboard = styled.div`\n\n  padding: 40px;\n  position: fixed;\n  left: 0;\n  bottom: 0;\n  // background-color: lightblue;\n  display: flex;\n\n`;\nconst Badge = styled.div`\n\n  padding: 20px;\n  height: 20px;\n  width: 20ppx\n  background-image: ${props => \"url(\" + props.icon + \")\"}\n\n`;\nconst MapContainer = styled.div`\n\n  background-image: url(img/background.jpg);\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n\n`;\nconst Map = styled.div`\n\n  // background-color: orange;\n  // border: 1px solid red;\n  height: 600px;\n  width: 1200px;\n  display: flex;\n\n`;\nconst MapListItem = styled.div`\n\n  // background-color: gray;\n  min-height: 40px;\n  margin: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n\n`;\nconst RenderMapList = styled.div`\n\n  overflow: scroll;\n\n`;\nconst TourStopList = styled.div`\n\n  overflow: scroll;\n  width: 400px;\n  background-color: white;\n  padding-left: 10px;\n\n`;\nconst MapRender = styled.div`\n\n  padding: 15px;\n  background-color: ${props => props.gameColor};\n  height: 100$;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  display:flex;\n  flex-direction: column;\n\n`; // const CompleteGameButton = styled.div`\n//   display: ${props => (props.currentGame == \"home\" ? \"none\" : \"block\")};\n//   margin: 20px;\n//   padding: 20px;\n//   background-color: white;\n// `\n\nconst GameWrap = styled.div`\n\n  height: 100%;\n  width: 100%;\n  // background-color: red;\n\n`;\nconst MapListBadgeCrossword = styled.div`\n\n  height: 20px;\n  width: 20px;\n  // background-color:  blue;\n  background-image: url(img/crossword-01.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n\n`;\nconst MapListBadgeColoring = styled.div`\n\nheight: 20px;\nwidth: 20px;\n  background-image: url(img/coloring-01.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n\n`;\nconst MapListBadgeMemory = styled.div`\n\nheight: 20px;\nwidth: 20px;\n  background-image: url(img/memory-01.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n\n`;\nconst MapListBadgeCompare = styled.div`\n\nheight: 20px;\nwidth: 20px;\n  background-image: url(img/compare-01.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n\n`;\nconst MapListBadgeSlider = styled.div`\n\nheight: 20px;\nwidth: 20px;\n  background-image: url(img/slider-01.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n\n`;\nconst DrawingWrap = styled.div`\n\n  height: 500px;\n  width: 500px;\n  // background-color: white;\n  background-image: ${props => props.coloringImage}\n`;\nconst CompareWrap = styled.div`\n\n  height: 500px;\n  width: 500px;\n\n`;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      score: 0,\n      completedCrosswords: 0,\n      completedColoring: 0,\n      completedPuzzle: 0,\n      completedWaldo: 0,\n      gameStart: true,\n      gameCompleted: false,\n      currentGame: \"home\",\n      currentCity: \"no city\",\n      currentState: \"no state\",\n      currentDate: \"no date\",\n      currentData: \"no data\"\n    };\n\n    this.componentDidMount = () => {};\n\n    this.componentDidUpdate = () => {\n      console.log(\"component did update // current game = \" + this.state.currentGame);\n      console.log(\"component did update // current data = \" + this.state.currentData);\n    };\n\n    this.finishGame = () => {\n      this.setState({\n        gameCompleted: true\n      });\n    };\n\n    this.changeGame = (game, city, state, date, data) => {\n      const newGame = game;\n      const newCity = city;\n      const newState = state;\n      const newDate = date;\n      const newData = data;\n      this.setState({\n        currentGame: newGame\n      });\n      this.setState({\n        currentCity: newCity\n      });\n      this.setState({\n        currentAction: newState\n      });\n      this.setState({\n        currentDate: newDate\n      });\n      this.setState({\n        currentData: newData\n      });\n      console.log(\"previous game \" + this.state.currentGame);\n      this.completeCurrentGame(newGame);\n    };\n\n    this.gameColor = arg => {\n      const expr = arg;\n\n      switch (expr) {\n        case \"crossword\":\n          return \"blue\";\n\n        case \"coloring\":\n          return \"orange\";\n\n        case \"slider\":\n          return \"pink\";\n\n        case \"waldo\":\n          return \"gray\";\n\n        case \"home\":\n          return \"lightblue\";\n      }\n    };\n\n    this.completeCurrentGame = arg => {\n      const expr = arg;\n      console.log(\"score added for \" + expr);\n\n      switch (expr) {\n        case \"crossword\":\n          this.setState({\n            completedCrosswords: this.state.completedCrosswords + 1\n          });\n          return;\n\n        case \"coloring\":\n          this.setState({\n            completedColoring: this.state.completedMemory + 1\n          });\n          return;\n\n        case \"slider\":\n          this.setState({\n            completedWaldo: this.state.completedSlider + 1\n          });\n          return;\n\n        case \"waldo\":\n          this.setState({\n            completedPuzzle: this.state.completedWaldo + 1\n          });\n          return;\n      }\n    };\n\n    this.renderGame = (arg, data) => {\n      const expr = arg;\n\n      switch (expr) {\n        case \"home\":\n          return mapVector();\n\n        case \"crossword\":\n          return React.createElement(Crossword, {\n            data: this.state.currentData,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 279\n            },\n            __self: this\n          });\n\n        case \"coloring\":\n          return React.createElement(DrawingWrap, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 281\n            },\n            __self: this\n          }, React.createElement(CanvasDraw, {\n            brushColor: \"red\",\n            imgSrc: \"./img/\" + this.state.currentData,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 282\n            },\n            __self: this\n          }), React.createElement(\"button\", {\n            onClick: () => {\n              localStorage.setItem(\"savedDrawing\", this.saveableCanvas.getSaveData());\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 283\n            },\n            __self: this\n          }, \"save\"));\n\n        case \"slider\":\n          return React.createElement(Slider, {\n            size: 2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 293\n            },\n            __self: this\n          });\n\n        case \"waldo\":\n          return React.createElement(CompareImgInput, {\n            data: this.state.currentData,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 295\n            },\n            __self: this\n          });\n      }\n    };\n\n    this.renderMapListBadge = arg => {\n      const expr = arg;\n\n      switch (expr) {\n        case \"crossword\":\n          return React.createElement(MapListBadgeCrossword, {\n            type: expr,\n            count: this.state.completedCrosswords,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 304\n            },\n            __self: this\n          });\n\n        case \"coloring\":\n          return React.createElement(MapListBadgeColoring, {\n            type: expr,\n            count: this.state.completedColoring,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 306\n            },\n            __self: this\n          });\n\n        case \"slider\":\n          return React.createElement(MapListBadgeSlider, {\n            type: expr,\n            count: this.state.completedSlider,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 308\n            },\n            __self: this\n          });\n\n        case \"waldo\":\n          return React.createElement(MapListBadgeSlider, {\n            type: expr,\n            count: this.state.completedWaldo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 310\n            },\n            __self: this\n          });\n      }\n    };\n  }\n\n  renderCompletionStatus(game, count) {\n    const expr = game;\n    let badgeString = \"'img/\" + expr + \"-0\" + count + \".png'\";\n    console.log(badgeString);\n    return React.createElement(Badge, {\n      icon: badgeString,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(Scoreboard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, this.renderCompletionStatus(this.state.currentGame), React.createElement(Badge, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, this.renderCompletionStatus(\"crossword\", this.state.completedCrosswords))), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(MapContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(Map, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, React.createElement(TourStopList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(RenderMapList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, tourStops && tourStops.map((x, i) => React.createElement(MapListItem, {\n      soma: true,\n      onClick: this.changeGame.bind(this, x.game, x.city, x.state, x.date, x.data),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, x.city, \". \", x.date1, \" / \", x.date2, \" - \", x.game), this.renderMapListBadge(x.game))))), React.createElement(MapRender, {\n      currentGame: this.state.currentGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, this.state.currentData, React.createElement(GameWrap, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, this.renderGame(this.state.currentGame)))))), React.createElement(Route, {\n      path: \"/map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, React.createElement(CompareImgInput, {\n      data: this.state.currentData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/*\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kmacaraeg/Documents/Projects/Walk off the Earth/walk-off-the-earth/src/App.js"],"names":["React","Component","styled","Crossword","Slider","ReactCompareImage","tourStops","mapVector","MemoryGame","CanvasDraw","CompareImgInput","BrowserRouter","Router","Switch","Route","Link","Scoreboard","div","Badge","props","icon","MapContainer","Map","MapListItem","RenderMapList","TourStopList","MapRender","gameColor","GameWrap","MapListBadgeCrossword","MapListBadgeColoring","MapListBadgeMemory","MapListBadgeCompare","MapListBadgeSlider","DrawingWrap","coloringImage","CompareWrap","App","state","score","completedCrosswords","completedColoring","completedPuzzle","completedWaldo","gameStart","gameCompleted","currentGame","currentCity","currentState","currentDate","currentData","componentDidMount","componentDidUpdate","console","log","finishGame","setState","changeGame","game","city","date","data","newGame","newCity","newState","newDate","newData","currentAction","completeCurrentGame","arg","expr","completedMemory","completedSlider","renderGame","localStorage","setItem","saveableCanvas","getSaveData","renderMapListBadge","renderCompletionStatus","count","badgeString","render","map","x","i","bind","date1","date2"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Crossword from \"react-crossword\";\nimport Slider from \"react-slider-game\";\nimport ReactCompareImage from 'react-compare-image';\nimport tourStops from './components/data/tourStops.jsx';\n// import MemoryGame from \"react-memory-game\";\nimport mapVector from './components/mapVector';\nimport MemoryGame from \"./components/memoryGame\";\n// import Drawing, { brushCustom } from 'react-drawing';\nimport CanvasDraw from \"react-canvas-draw\";\nimport CompareImgInput from \"./components/CompareImgInput\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\n\nconst Scoreboard = styled.div`\n\n  padding: 40px;\n  position: fixed;\n  left: 0;\n  bottom: 0;\n  // background-color: lightblue;\n  display: flex;\n\n`\nconst Badge = styled.div`\n\n  padding: 20px;\n  height: 20px;\n  width: 20ppx\n  background-image: ${props => \"url(\" + props.icon + \")\"}\n\n`\n\nconst MapContainer = styled.div`\n\n  background-image: url(img/background.jpg);\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n\n`\n\nconst Map = styled.div`\n\n  // background-color: orange;\n  // border: 1px solid red;\n  height: 600px;\n  width: 1200px;\n  display: flex;\n\n`\n\nconst MapListItem = styled.div`\n\n  // background-color: gray;\n  min-height: 40px;\n  margin: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n\n`\n\nconst RenderMapList = styled.div`\n\n  overflow: scroll;\n\n`\n\nconst TourStopList = styled.div`\n\n  overflow: scroll;\n  width: 400px;\n  background-color: white;\n  padding-left: 10px;\n\n`\n\nconst MapRender = styled.div`\n\n  padding: 15px;\n  background-color: ${props => props.gameColor};\n  height: 100$;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  display:flex;\n  flex-direction: column;\n\n`\n\n// const CompleteGameButton = styled.div`\n\n//   display: ${props => (props.currentGame == \"home\" ? \"none\" : \"block\")};\n//   margin: 20px;\n//   padding: 20px;\n//   background-color: white;\n\n// `\n\nconst GameWrap = styled.div`\n\n  height: 100%;\n  width: 100%;\n  // background-color: red;\n\n`\n\nconst MapListBadgeCrossword = styled.div`\n\n  height: 20px;\n  width: 20px;\n  // background-color:  blue;\n  background-image: url(img/crossword-01.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n\n`\n\nconst MapListBadgeColoring = styled.div`\n\nheight: 20px;\nwidth: 20px;\n  background-image: url(img/coloring-01.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n\n`\nconst MapListBadgeMemory = styled.div`\n\nheight: 20px;\nwidth: 20px;\n  background-image: url(img/memory-01.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n\n`\nconst MapListBadgeCompare = styled.div`\n\nheight: 20px;\nwidth: 20px;\n  background-image: url(img/compare-01.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n\n`\nconst MapListBadgeSlider = styled.div`\n\nheight: 20px;\nwidth: 20px;\n  background-image: url(img/slider-01.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n\n`\n\nconst DrawingWrap = styled.div`\n\n  height: 500px;\n  width: 500px;\n  // background-color: white;\n  background-image: ${props => props.coloringImage}\n`\n\nconst CompareWrap = styled.div`\n\n  height: 500px;\n  width: 500px;\n\n`\n\nclass App extends Component {\n\n  state = {\n    score: 0,\n\n    completedCrosswords: 0,\n    completedColoring: 0,\n    completedPuzzle: 0,\n    completedWaldo: 0,\n\n    gameStart: true,\n    gameCompleted: false,\n\n    currentGame: \"home\",\n    currentCity: \"no city\",\n    currentState: \"no state\",\n    currentDate: \"no date\",\n    currentData: \"no data\",\n  }\n\n  componentDidMount = () => {\n\n\n\n  }\n\n  componentDidUpdate = () => {\n\n    console.log(\"component did update // current game = \" + this.state.currentGame)\n    console.log(\"component did update // current data = \" + this.state.currentData)\n\n  }\n\n  finishGame = () => {\n\n    this.setState({ gameCompleted: true });\n\n  }\n\n  changeGame = (game, city, state, date, data) => {\n    const newGame = game;\n    const newCity = city;\n    const newState = state;\n    const newDate = date;\n    const newData = data;\n    this.setState({ currentGame: newGame });\n    this.setState({ currentCity: newCity });\n    this.setState({ currentAction: newState });\n    this.setState({ currentDate: newDate });\n    this.setState({ currentData: newData });\n    console.log(\"previous game \" + this.state.currentGame);\n    this.completeCurrentGame(newGame)\n  }\n\n  gameColor = (arg) => {\n\n    const expr = arg\n    switch (expr) {\n      case \"crossword\":\n        return \"blue\";\n      case \"coloring\":\n        return \"orange\";\n      case \"slider\":\n        return \"pink\";\n      case \"waldo\":\n        return \"gray\";\n      case \"home\":\n        return \"lightblue\";\n    }\n  }\n\n  completeCurrentGame = (arg) => {\n    const expr = arg\n    console.log(\"score added for \" + expr)\n    switch (expr) {\n      case \"crossword\":\n        this.setState({ completedCrosswords: (this.state.completedCrosswords + 1) })\n        return;\n      case \"coloring\":\n        this.setState({ completedColoring: (this.state.completedMemory + 1) })\n        return;\n      case \"slider\":\n        this.setState({ completedWaldo: (this.state.completedSlider + 1) })\n        return;\n      case \"waldo\":\n        this.setState({ completedPuzzle: (this.state.completedWaldo + 1) })\n        return;\n    }\n  }\n\n  renderGame = (arg, data) => {\n    const expr = arg\n    switch (expr) {\n      case \"home\":\n        return mapVector()\n      case \"crossword\":\n        return <Crossword data={this.state.currentData} />;\n      case \"coloring\":\n        return <DrawingWrap >\n          <CanvasDraw brushColor={\"red\"} imgSrc={\"./img/\" + this.state.currentData} />\n          <button\n            onClick={() => {\n              localStorage.setItem(\n                \"savedDrawing\",\n                this.saveableCanvas.getSaveData()\n              );\n            }}\n          >save</button>\n        </DrawingWrap>\n      case \"slider\":\n        return <Slider size={2} />;\n        case \"waldo\":\n          return <CompareImgInput data={this.state.currentData}/>\n    }\n\n  }\n\n  renderMapListBadge = (arg) => {\n    const expr = arg\n    switch (expr) {\n      case \"crossword\":\n        return <MapListBadgeCrossword type={expr} count={this.state.completedCrosswords}/>;\n      case \"coloring\":\n        return <MapListBadgeColoring type={expr} count={this.state.completedColoring}/>;\n      case \"slider\":\n        return <MapListBadgeSlider type={expr} count={this.state.completedSlider}/>;\n        case \"waldo\":\n            return <MapListBadgeSlider type={expr} count={this.state.completedWaldo}/>;\n      }\n  }\n\n  renderCompletionStatus(game, count) {\n    const expr = game\n    let badgeString = \"'img/\" + expr + \"-0\" + count + \".png'\"\n    console.log(badgeString)\n    return <Badge icon={badgeString}/>\n\n  }\n\n  render() {\n\n    return (\n      <Router>\n        <div>\n\n          <Scoreboard>\n            {/* <RenderBadges gameStatus={gameStatus} badges={this.state.badges} /> */}\n           {this.renderCompletionStatus(this.state.currentGame)}\n\n            <Badge>{this.renderCompletionStatus(\"crossword\", this.state.completedCrosswords)}</Badge>            \n            {/* <Badge>{this.state.completedCrosswords}</Badge>\n            <Badge>{this.state.completedColoring}</Badge>\n            <Badge>{this.state.completedWaldo}</Badge>\n            <Badge>{this.state.completedPuzzle}</Badge> */}\n          </Scoreboard>\n\n          <Switch>\n\n            <Route exact path=\"/\">\n\n              <MapContainer>\n\n                <Map>\n\n                  <TourStopList>\n                    <RenderMapList>\n\n                      {tourStops && tourStops.map((x, i) => (\n                        <MapListItem soma onClick={\n                          this.changeGame.bind(this, x.game, x.city, x.state, x.date, x.data)\n                        }  >\n\n                          <div>{x.city}. {x.date1} / {x.date2} - {x.game}\n                          </div>\n                          {this.renderMapListBadge(x.game)}\n\n                        </MapListItem>\n                      ))\n                      }\n\n                    </RenderMapList>\n                  </TourStopList>\n\n                  <MapRender currentGame={this.state.currentGame}>\n                  {this.state.currentData}\n                    <GameWrap>\n                      {this.renderGame(this.state.currentGame)}\n                    </GameWrap>\n                  </MapRender>\n\n                </Map>\n\n              </MapContainer>\n\n            </Route>\n\n            <Route path=\"/map\">\n            <CompareImgInput data={this.state.currentData}/>\n            </Route>\n            <Route path=\"/*\">\n            </Route>\n          </Switch>\n\n        </div>\n\n      </Router>\n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}