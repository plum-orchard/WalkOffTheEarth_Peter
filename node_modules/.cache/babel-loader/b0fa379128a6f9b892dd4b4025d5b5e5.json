{"ast":null,"code":"import _toConsumableArray from \"/Users/plum/Desktop/WalkOffTheEarth/walk-off-the-earth/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/plum/Desktop/WalkOffTheEarth/walk-off-the-earth/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/plum/Desktop/WalkOffTheEarth/walk-off-the-earth/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar EMPTY = 0;\n\nArray.prototype.swap = function (i, j) {\n  // eslint-disable-line no-extend-native\n  var _ref = [this[j], this[i]];\n  this[i] = _ref[0];\n  this[j] = _ref[1];\n  return this;\n};\n\nvar BoardLogic =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Constructor\r\n   * @param {*} data can be one of three:\r\n   * size (number): init matrix with size number*number \r\n   * matrix: if array use given array as matrix\r\n   * other: use default size\r\n   */\n  function BoardLogic(data) {\n    _classCallCheck(this, BoardLogic);\n\n    var DEFAULT_SIZE = 3;\n\n    if (Array.isArray(data)) {\n      // Data is Array\n      this.size = Math.ceil(Math.sqrt(data.length));\n      this.board = _toConsumableArray(data);\n    } else {\n      // Data is number or undefiend\n      this.size = isNaN(data) ? DEFAULT_SIZE : data;\n      this.board = this.initBord(data);\n    }\n  }\n  /**\r\n  * Gets a new board of the given size\r\n  * @param {Number} size amount of Boxes per row\r\n  */\n\n\n  _createClass(BoardLogic, [{\n    key: \"initBord\",\n    value: function initBord(size) {\n      if (size == 2) {\n        return [0, 1, 3, 2];\n      }\n\n      return Array.from({\n        length: size * size\n      }, function (_, b) {\n        return b;\n      });\n    }\n    /**\r\n     * Getter, return a copy of the game board \r\n     */\n\n  }, {\n    key: \"move\",\n\n    /**\r\n     * moves the tile at the given (i,j) cordinates \r\n     * to the current empty space (only if legal)\r\n     * @param {*} i row index\r\n     * @param {*} j column index\r\n     */\n    value: function move(i, j) {\n      var _this = this;\n\n      var legalFriends = this.getLegalFriends(i, j);\n\n      var b2c = function b2c(_ref2) {\n        var i = _ref2.i,\n            j = _ref2.j;\n        return _this.size * j + i;\n      };\n\n      var empty = null;\n\n      if (legalFriends.some(function (box) {\n        return _this.board[b2c(empty = box)] === EMPTY;\n      })) {\n        this.board.swap(b2c(empty), b2c({\n          i: i,\n          j: j\n        }));\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n    * Checks if board is in win configuration.\r\n    */\n\n  }, {\n    key: \"checkWin\",\n    value: function checkWin() {\n      var last = this.board.length - 1;\n      return !!this.board.reduce(function (res, cur, i) {\n        return res && (cur === i + 1 || i === last);\n      });\n    }\n    /**\r\n    * Scrambles the board randomly in a solvable way.\r\n    */\n\n  }, {\n    key: \"scramble\",\n    value: function scramble() {\n      var _this2 = this;\n\n      var SCRAMBLE_FACTOR = this.board.length * 10;\n\n      var rand = function rand(min, max) {\n        return Math.floor(Math.random() * (max - min) + min);\n      };\n\n      var emptyIdx = this.board.indexOf(EMPTY);\n      var _ref3 = [emptyIdx % this.size, Math.floor(emptyIdx / this.size)],\n          i = _ref3[0],\n          j = _ref3[1];\n\n      var b2c = function b2c(_ref4) {\n        var i = _ref4.i,\n            j = _ref4.j;\n        return _this2.size * j + i;\n      };\n\n      for (var ind = 0; ind < SCRAMBLE_FACTOR; ++ind) {\n        var legalFriends = this.getLegalFriends(i, j);\n        var friend = legalFriends[rand(0, legalFriends.length)];\n        this.board.swap(b2c(friend), b2c({\n          i: i,\n          j: j\n        }));\n        i = friend.i;\n        j = friend.j;\n      }\n\n      return this.matrix;\n    }\n    /**\r\n     * Gets all existing tiles around a given tile (i,j)\r\n     * @param {Number} i \r\n     * @param {Number} j \r\n     */\n\n  }, {\n    key: \"getLegalFriends\",\n    value: function getLegalFriends(i, j) {\n      var _this3 = this;\n\n      var friends = [{\n        i: i + 1,\n        j: j\n      }, {\n        i: i - 1,\n        j: j\n      }, {\n        i: i,\n        j: j + 1\n      }, {\n        i: i,\n        j: j - 1\n      }]; // ES6 feature :  Arrow functions + Destructing assignment\n\n      var isLegal = function isLegal(_ref5) {\n        var i = _ref5.i,\n            j = _ref5.j;\n        return i < _this3.size && i >= 0 && j < _this3.size && j >= 0;\n      };\n\n      return friends.filter(isLegal);\n    }\n  }, {\n    key: \"matrix\",\n    get: function get() {\n      var _this4 = this;\n\n      return this.board.reduce(function (rows, key, index) {\n        return (index % _this4.size === 0 ? rows.push([key]) : rows[rows.length - 1].push(key)) && rows;\n      }, []);\n    }\n  }]);\n\n  return BoardLogic;\n}();\n\nexport { BoardLogic as default };","map":{"version":3,"sources":["/Users/plum/Desktop/WalkOffTheEarth/walk-off-the-earth/node_modules/react-slider-game/dist/BoardLogic.js"],"names":["EMPTY","Array","prototype","swap","i","j","BoardLogic","data","DEFAULT_SIZE","isArray","size","Math","ceil","sqrt","length","board","isNaN","initBord","from","_","b","legalFriends","getLegalFriends","b2c","empty","some","box","last","reduce","res","cur","SCRAMBLE_FACTOR","rand","min","max","floor","random","emptyIdx","indexOf","ind","friend","matrix","friends","isLegal","filter","rows","key","index","push"],"mappings":"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","sourcesContent":["const EMPTY = 0;\n\nArray.prototype.swap = function (i, j) {\n  // eslint-disable-line no-extend-native\n  [this[i], this[j]] = [this[j], this[i]];\n  return this;\n};\n\nexport default class BoardLogic {\n  /**\r\n   * Constructor\r\n   * @param {*} data can be one of three:\r\n   * size (number): init matrix with size number*number \r\n   * matrix: if array use given array as matrix\r\n   * other: use default size\r\n   */\n  constructor(data) {\n    const DEFAULT_SIZE = 3;\n\n    if (Array.isArray(data)) {\n      // Data is Array\n      this.size = Math.ceil(Math.sqrt(data.length));\n      this.board = [...data];\n    } else {\n      // Data is number or undefiend\n      this.size = isNaN(data) ? DEFAULT_SIZE : data;\n      this.board = this.initBord(data);\n    }\n  }\n  /**\r\n  * Gets a new board of the given size\r\n  * @param {Number} size amount of Boxes per row\r\n  */\n\n\n  initBord(size) {\n    if (size == 2) {\n      return [0, 1, 3, 2];\n    }\n\n    return Array.from({\n      length: size * size\n    }, (_, b) => b);\n  }\n  /**\r\n   * Getter, return a copy of the game board \r\n   */\n\n\n  get matrix() {\n    return this.board.reduce((rows, key, index) => (index % this.size === 0 ? rows.push([key]) : rows[rows.length - 1].push(key)) && rows, []);\n  }\n  /**\r\n   * moves the tile at the given (i,j) cordinates \r\n   * to the current empty space (only if legal)\r\n   * @param {*} i row index\r\n   * @param {*} j column index\r\n   */\n\n\n  move(i, j) {\n    let legalFriends = this.getLegalFriends(i, j);\n\n    let b2c = ({\n      i,\n      j\n    }) => this.size * j + i;\n\n    let empty = null;\n\n    if (legalFriends.some(box => this.board[b2c(empty = box)] === EMPTY)) {\n      this.board.swap(b2c(empty), b2c({\n        i,\n        j\n      }));\n      return true;\n    }\n\n    return false;\n  }\n  /**\r\n  * Checks if board is in win configuration.\r\n  */\n\n\n  checkWin() {\n    let last = this.board.length - 1;\n    return !!this.board.reduce((res, cur, i) => res && (cur === i + 1 || i === last));\n  }\n  /**\r\n  * Scrambles the board randomly in a solvable way.\r\n  */\n\n\n  scramble() {\n    const SCRAMBLE_FACTOR = this.board.length * 10;\n\n    let rand = (min, max) => Math.floor(Math.random() * (max - min) + min);\n\n    let emptyIdx = this.board.indexOf(EMPTY);\n    let [i, j] = [emptyIdx % this.size, Math.floor(emptyIdx / this.size)];\n\n    let b2c = ({\n      i,\n      j\n    }) => this.size * j + i;\n\n    for (let ind = 0; ind < SCRAMBLE_FACTOR; ++ind) {\n      let legalFriends = this.getLegalFriends(i, j);\n      let friend = legalFriends[rand(0, legalFriends.length)];\n      this.board.swap(b2c(friend), b2c({\n        i,\n        j\n      }));\n      ({\n        i,\n        j\n      } = friend);\n    }\n\n    return this.matrix;\n  }\n  /**\r\n   * Gets all existing tiles around a given tile (i,j)\r\n   * @param {Number} i \r\n   * @param {Number} j \r\n   */\n\n\n  getLegalFriends(i, j) {\n    let friends = [{\n      i: i + 1,\n      j\n    }, {\n      i: i - 1,\n      j\n    }, {\n      i,\n      j: j + 1\n    }, {\n      i,\n      j: j - 1\n    }]; // ES6 feature :  Arrow functions + Destructing assignment\n\n    let isLegal = ({\n      i,\n      j\n    }) => i < this.size && i >= 0 && j < this.size && j >= 0;\n\n    return friends.filter(isLegal);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}