{"ast":null,"code":"var _jsxFileName = \"/Users/kmacaraeg/Documents/Projects/Walk off the Earth/walk-off-the-earth/src/App.js\";\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Crossword from \"react-crossword\";\nimport Slider from \"react-slider-game\";\nimport tourStops from './components/data/tourStops.jsx'; // import MemoryGame from \"react-memory-game\";\n\nimport mapVector from './components/mapVector';\nimport MemoryGame from \"./components/memoryGame\"; // import Drawing, { brushCustom } from 'react-drawing';\n\nimport CanvasDraw from \"react-canvas-draw\";\nimport CompareImgInput from \"./components/CompareImgInput\";\nimport crosswordLA from \"./components/data/crosswordLA\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport './App.css';\nimport { timingSafeEqual } from 'crypto';\nconst Scoreboard = styled.div`\n\n  padding: 40px;\n  position: fixed;\n  left: 0;\n  bottom: 0;\n  // background-color: lightblue;\n  display: flex;\n\n`;\nconst Badge = styled.div`\n\nmargin: 5px;\n  height: 20px;\n  width: 20px;\n  background-image: ${props => \"url(\" + props.star + \")\"};\n  background-size: cover;\n\n`;\nconst MapContainer = styled.div`\n\n  background-image: url(img/background.jpg);\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n\n`;\nconst Map = styled.div`\n\n  // background-color: orange;\n  // border: 1px solid red;\n  height: 600px;\n  width: 1200px;\n  display: flex;\n  border: 1px solid ${props => props.theme.brown};\n\n`;\nconst MapListItem = styled.div`\n\n  // background-color: gray;\n  min-height: 40px;\n  margin: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n\n`;\nconst RenderMapList = styled.div`\n\n  overflow: scroll;\n\n`;\nconst TourStopList = styled.div`\n\n  overflow: scroll;\n  width: 400px;\n  background-color: white;\n  padding-left: 10px;\n\n`;\nconst MapRender = styled.div`\n\n  padding: 15px;\n  background-color: ${props => props.gameColor};\n  height: 100$;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  display:flex;\n  flex-direction: column;\n\n  .compareImageInput {\n    width: 400px;\n  }\n\n`;\nconst GameWrap = styled.div`\n\n  height: 100%;\n  width: 100%;\n  // background-color: red;\n\n`;\nconst MapListBadgeCrossword = styled.div`\n\n  height: 20px;\n  width: 20px;\n  // background-color:  blue;\n  background-image: url(img/crossword-01.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n\n`;\nconst MapListBadgeColoring = styled.div`\n\n  height: 20px;\n  width: 20px;\n  background-image: url(img/coloring-01.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n\n`;\nconst MapListBadgeWaldo = styled.div`\n\n  height: 20px;\n  width: 20px;\n  background-image: url(img/waldo-01.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n\n`;\nconst MapListBadgePuzzle = styled.div`\n\n  height: 20px;\n  width: 20px;\n  background-image: url(img/puzzle-01.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n\n`;\nconst DrawingWrap = styled.div`\n\n  height: 500px;\n  width: 500px;\n  // background-color: white;\n  background-image: ${props => props.coloringImage}\n`;\nconst CompareWrap = styled.div`\n\n  height: 500px;\n  width: 500px;\n\n`;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      score: 0,\n      completedCrosswords: 0,\n      completedColoring: 0,\n      completedPuzzle: 0,\n      completedWaldo: 0,\n      gameStart: true,\n      gameCompleted: false,\n      gameState: 0,\n      currentGame: \"home\",\n      currentCity: \"no city\",\n      currentState: \"no state\",\n      currentDate: \"no date\",\n      currentData: \"no data\",\n      currentData2: \"no data2\",\n      modalShown: false,\n      theme: {\n        brown: \"#583539\",\n        purple: \"#B486BC\",\n        yellow: \"#FDB714\",\n        green: \"#88CCA4\",\n        pink: \"#E25085\"\n      }\n    };\n\n    this.componentDidMount = () => {};\n\n    this.componentDidUpdate = () => {\n      console.log(\"component did update // current game = \" + this.state.currentGame);\n      console.log(\"component did update // current data = \" + this.state.currentData);\n      console.log(\"data2 = \" + this.state.currentData2);\n\n      if (this.state.completedCrosswords > 0 && this.state.completedColoring > 0 && this.state.completedPuzzle > 0 && this.state.completedWaldo > 0 && this.state.gameState === 0) {\n        this.setState({\n          gameState: 1\n        });\n      }\n    };\n\n    this.finishGame = () => {\n      this.setState({\n        gameCompleted: true\n      });\n    };\n\n    this.changeGame = (game, city, state, date, data, data2) => {\n      console.log(data2);\n      const newGame = game;\n      const newCity = city;\n      const newState = state;\n      const newDate = date;\n      const newData = data;\n      const newData2 = data2;\n      this.setState({\n        currentGame: newGame\n      });\n      this.setState({\n        currentCity: newCity\n      });\n      this.setState({\n        currentAction: newState\n      });\n      this.setState({\n        currentDate: newDate\n      });\n      this.setState({\n        currentData: newData\n      });\n      this.setState({\n        currentData2: newData2\n      });\n      console.log(\"previous game \" + this.state.currentGame);\n      this.completeCurrentGame(newGame);\n    };\n\n    this.gameColor = arg => {\n      const expr = arg;\n\n      switch (expr) {\n        case \"crossword\":\n          return \"blue\";\n\n        case \"coloring\":\n          return \"orange\";\n\n        case \"puzzle\":\n          return \"pink\";\n\n        case \"waldo\":\n          return \"gray\";\n\n        case \"home\":\n          return \"lightblue\";\n      }\n    };\n\n    this.completeCurrentGame = arg => {\n      const expr = arg;\n      console.log(\"score added for \" + expr);\n\n      switch (expr) {\n        case \"crossword\":\n          this.setState({\n            completedCrosswords: this.state.completedCrosswords + 1\n          });\n          return;\n\n        case \"coloring\":\n          this.setState({\n            completedColoring: this.state.completedColoring + 1\n          });\n          return;\n\n        case \"puzzle\":\n          this.setState({\n            completedPuzzle: this.state.completedPuzzle + 1\n          });\n          return;\n\n        case \"waldo\":\n          this.setState({\n            completedWaldo: this.state.completedWaldo + 1\n          });\n          return;\n      }\n    };\n\n    this.renderGame = (arg, data) => {\n      const expr = arg;\n\n      switch (expr) {\n        case \"home\":\n          return mapVector();\n\n        case \"crossword\":\n          return React.createElement(Crossword, {\n            data: crosswordLA,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 287\n            },\n            __self: this\n          });\n\n        case \"coloring\":\n          return React.createElement(DrawingWrap, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 289\n            },\n            __self: this\n          }, React.createElement(CanvasDraw, {\n            brushColor: \"red\",\n            imgSrc: \"./img/\" + this.state.currentData,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 290\n            },\n            __self: this\n          }), React.createElement(\"button\", {\n            onClick: () => {\n              localStorage.setItem(\"savedDrawing\", this.saveableCanvas.getSaveData());\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 291\n            },\n            __self: this\n          }, \"save\"));\n\n        case \"puzzle\":\n          return React.createElement(Slider, {\n            size: 2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 301\n            },\n            __self: this\n          });\n\n        case \"waldo\":\n          return React.createElement(CompareImgInput, {\n            className: \"compareImageInput\",\n            data: this.state.currentData,\n            rightImage: this.state.currentData2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 303\n            },\n            __self: this\n          });\n      }\n    };\n\n    this.renderMapListBadge = arg => {\n      const expr = arg;\n\n      switch (expr) {\n        case \"crossword\":\n          return React.createElement(MapListBadgeCrossword, {\n            type: expr,\n            count: this.state.completedCrosswords,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 312\n            },\n            __self: this\n          });\n\n        case \"coloring\":\n          return React.createElement(MapListBadgeColoring, {\n            type: expr,\n            count: this.state.completedColoring,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 314\n            },\n            __self: this\n          });\n\n        case \"puzzle\":\n          return React.createElement(MapListBadgePuzzle, {\n            type: expr,\n            count: this.state.completedPuzzle,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 316\n            },\n            __self: this\n          });\n\n        case \"waldo\":\n          return React.createElement(MapListBadgeWaldo, {\n            type: expr,\n            count: this.state.completedWaldo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 318\n            },\n            __self: this\n          });\n      }\n    };\n  }\n\n  renderCompletionStatus(game, count) {\n    const expr = game;\n\n    if (count > 2) {\n      return \"'img/\" + expr + \"-0\" + \"3\" + \".png'\";\n    }\n\n    let badgeString = \"'img/\" + expr + \"-0\" + count + \".png'\";\n    console.log(badgeString);\n    return badgeString;\n  }\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, React.createElement(Scoreboard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, React.createElement(Badge, {\n      star: this.renderCompletionStatus(\"crossword\", this.state.completedCrosswords),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }), React.createElement(Badge, {\n      star: this.renderCompletionStatus(\"coloring\", this.state.completedColoring),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }), React.createElement(Badge, {\n      star: this.renderCompletionStatus(\"puzzle\", this.state.completedPuzzle),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }), React.createElement(Badge, {\n      star: this.renderCompletionStatus(\"waldo\", this.state.completedWaldo),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }), this.state.gameState), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, React.createElement(MapContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, React.createElement(Map, {\n      theme: this.state.theme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, React.createElement(TourStopList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, React.createElement(RenderMapList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, tourStops && tourStops.map((x, i) => React.createElement(MapListItem, {\n      soma: true,\n      onClick: this.changeGame.bind(this, x.game, x.city, x.state, x.date, x.data, x.data2),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, x.date1, \" / \", x.date2, \" \", x.city), this.renderMapListBadge(x.game))))), React.createElement(MapRender, {\n      currentGame: this.state.currentGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(GameWrap, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, this.renderGame(this.state.currentGame)))))), React.createElement(Route, {\n      path: \"/map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, React.createElement(CompareImgInput, {\n      data: this.state.currentData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/*\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kmacaraeg/Documents/Projects/Walk off the Earth/walk-off-the-earth/src/App.js"],"names":["React","Component","styled","Crossword","Slider","tourStops","mapVector","MemoryGame","CanvasDraw","CompareImgInput","crosswordLA","BrowserRouter","Router","Switch","Route","Link","timingSafeEqual","Scoreboard","div","Badge","props","star","MapContainer","Map","theme","brown","MapListItem","RenderMapList","TourStopList","MapRender","gameColor","GameWrap","MapListBadgeCrossword","MapListBadgeColoring","MapListBadgeWaldo","MapListBadgePuzzle","DrawingWrap","coloringImage","CompareWrap","App","state","score","completedCrosswords","completedColoring","completedPuzzle","completedWaldo","gameStart","gameCompleted","gameState","currentGame","currentCity","currentState","currentDate","currentData","currentData2","modalShown","purple","yellow","green","pink","componentDidMount","componentDidUpdate","console","log","setState","finishGame","changeGame","game","city","date","data","data2","newGame","newCity","newState","newDate","newData","newData2","currentAction","completeCurrentGame","arg","expr","renderGame","localStorage","setItem","saveableCanvas","getSaveData","renderMapListBadge","renderCompletionStatus","count","badgeString","render","map","x","i","bind","date1","date2"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,SAAP,MAAsB,iCAAtB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,UAAP,MAAuB,yBAAvB,C,CACA;;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AAEA,SACEC,aAAa,IAAIC,MADnB,EAEEC,MAFF,EAGEC,KAHF,EAIEC,IAJF,QAKO,kBALP;AAMA,OAAO,WAAP;AACA,SAASC,eAAT,QAAgC,QAAhC;AAEA,MAAMC,UAAU,GAAGf,MAAM,CAACgB,GAAI;;;;;;;;;CAA9B;AAUA,MAAMC,KAAK,GAAGjB,MAAM,CAACgB,GAAI;;;;;sBAKHE,KAAK,IAAI,SAASA,KAAK,CAACC,IAAf,GAAsB,GAAI;;;CALzD;AAUA,MAAMC,YAAY,GAAGpB,MAAM,CAACgB,GAAI;;;;;;;;;;CAAhC;AAYA,MAAMK,GAAG,GAAGrB,MAAM,CAACgB,GAAI;;;;;;;sBAODE,KAAK,IAAIA,KAAK,CAACI,KAAN,CAAYC,KAAM;;CAPjD;AAWA,MAAMC,WAAW,GAAGxB,MAAM,CAACgB,GAAI;;;;;;;;;;CAA/B;AAYA,MAAMS,aAAa,GAAGzB,MAAM,CAACgB,GAAI;;;;CAAjC;AAMA,MAAMU,YAAY,GAAG1B,MAAM,CAACgB,GAAI;;;;;;;CAAhC;AASA,MAAMW,SAAS,GAAG3B,MAAM,CAACgB,GAAI;;;sBAGPE,KAAK,IAAIA,KAAK,CAACU,SAAU;;;;;;;;;;;;CAH/C;AAiBA,MAAMC,QAAQ,GAAG7B,MAAM,CAACgB,GAAI;;;;;;CAA5B;AAQA,MAAMc,qBAAqB,GAAG9B,MAAM,CAACgB,GAAI;;;;;;;;;CAAzC;AAWA,MAAMe,oBAAoB,GAAG/B,MAAM,CAACgB,GAAI;;;;;;;;CAAxC;AASA,MAAMgB,iBAAiB,GAAGhC,MAAM,CAACgB,GAAI;;;;;;;;CAArC;AASA,MAAMiB,kBAAkB,GAAGjC,MAAM,CAACgB,GAAI;;;;;;;;CAAtC;AAUA,MAAMkB,WAAW,GAAGlC,MAAM,CAACgB,GAAI;;;;;sBAKTE,KAAK,IAAIA,KAAK,CAACiB,aAAc;CALnD;AAQA,MAAMC,WAAW,GAAGpC,MAAM,CAACgB,GAAI;;;;;CAA/B;;AAOA,MAAMqB,GAAN,SAAkBtC,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BuC,KAF0B,GAElB;AACNC,MAAAA,KAAK,EAAE,CADD;AAGNC,MAAAA,mBAAmB,EAAE,CAHf;AAINC,MAAAA,iBAAiB,EAAE,CAJb;AAKNC,MAAAA,eAAe,EAAE,CALX;AAMNC,MAAAA,cAAc,EAAE,CANV;AAQNC,MAAAA,SAAS,EAAE,IARL;AASNC,MAAAA,aAAa,EAAE,KATT;AAUNC,MAAAA,SAAS,EAAE,CAVL;AAYNC,MAAAA,WAAW,EAAE,MAZP;AAaNC,MAAAA,WAAW,EAAE,SAbP;AAcNC,MAAAA,YAAY,EAAE,UAdR;AAeNC,MAAAA,WAAW,EAAE,SAfP;AAgBNC,MAAAA,WAAW,EAAE,SAhBP;AAiBNC,MAAAA,YAAY,EAAE,UAjBR;AAmBNC,MAAAA,UAAU,EAAE,KAnBN;AAqBN/B,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,SADF;AAEL+B,QAAAA,MAAM,EAAE,SAFH;AAGLC,QAAAA,MAAM,EAAE,SAHH;AAILC,QAAAA,KAAK,EAAE,SAJF;AAKLC,QAAAA,IAAI,EAAE;AALD;AArBD,KAFkB;;AAAA,SAiC1BC,iBAjC0B,GAiCN,MAAM,CAEzB,CAnCyB;;AAAA,SAqC1BC,kBArC0B,GAqCL,MAAM;AAEzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,4CAA4C,KAAKvB,KAAL,CAAWS,WAAnE;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAY,4CAA4C,KAAKvB,KAAL,CAAWa,WAAnE;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAa,KAAKvB,KAAL,CAAWc,YAApC;;AAEA,UAAI,KAAKd,KAAL,CAAWE,mBAAX,GAAiC,CAAjC,IAAsC,KAAKF,KAAL,CAAWG,iBAAX,GAA+B,CAArE,IAA0E,KAAKH,KAAL,CAAWI,eAAX,GAA6B,CAAvG,IAA4G,KAAKJ,KAAL,CAAWK,cAAX,GAA4B,CAAxI,IAA6I,KAAKL,KAAL,CAAWQ,SAAX,KAAyB,CAA1K,EAA6K;AAC3K,aAAKgB,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAE;AAAZ,SAAd;AACD;AAEF,KA/CyB;;AAAA,SAiD1BiB,UAjD0B,GAiDb,MAAM;AAEjB,WAAKD,QAAL,CAAc;AAAEjB,QAAAA,aAAa,EAAE;AAAjB,OAAd;AAED,KArDyB;;AAAA,SAuD1BmB,UAvD0B,GAuDb,CAACC,IAAD,EAAOC,IAAP,EAAa5B,KAAb,EAAoB6B,IAApB,EAA0BC,IAA1B,EAAgCC,KAAhC,KAA0C;AACrDT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACA,YAAMC,OAAO,GAAGL,IAAhB;AACA,YAAMM,OAAO,GAAGL,IAAhB;AACA,YAAMM,QAAQ,GAAGlC,KAAjB;AACA,YAAMmC,OAAO,GAAGN,IAAhB;AACA,YAAMO,OAAO,GAAGN,IAAhB;AACA,YAAMO,QAAQ,GAAGN,KAAjB;AACA,WAAKP,QAAL,CAAc;AAAEf,QAAAA,WAAW,EAAEuB;AAAf,OAAd;AACA,WAAKR,QAAL,CAAc;AAAEd,QAAAA,WAAW,EAAEuB;AAAf,OAAd;AACA,WAAKT,QAAL,CAAc;AAAEc,QAAAA,aAAa,EAAEJ;AAAjB,OAAd;AACA,WAAKV,QAAL,CAAc;AAAEZ,QAAAA,WAAW,EAAEuB;AAAf,OAAd;AACA,WAAKX,QAAL,CAAc;AAAEX,QAAAA,WAAW,EAAEuB;AAAf,OAAd;AACA,WAAKZ,QAAL,CAAc;AAAEV,QAAAA,YAAY,EAAEuB;AAAhB,OAAd;AACAf,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmB,KAAKvB,KAAL,CAAWS,WAA1C;AACA,WAAK8B,mBAAL,CAAyBP,OAAzB;AACD,KAvEyB;;AAAA,SAyE1B1C,SAzE0B,GAyEbkD,GAAD,IAAS;AAEnB,YAAMC,IAAI,GAAGD,GAAb;;AACA,cAAQC,IAAR;AACE,aAAK,WAAL;AACE,iBAAO,MAAP;;AACF,aAAK,UAAL;AACE,iBAAO,QAAP;;AACF,aAAK,QAAL;AACE,iBAAO,MAAP;;AACF,aAAK,OAAL;AACE,iBAAO,MAAP;;AACF,aAAK,MAAL;AACE,iBAAO,WAAP;AAVJ;AAYD,KAxFyB;;AAAA,SA0F1BF,mBA1F0B,GA0FHC,GAAD,IAAS;AAC7B,YAAMC,IAAI,GAAGD,GAAb;AACAlB,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBkB,IAAjC;;AACA,cAAQA,IAAR;AACE,aAAK,WAAL;AACE,eAAKjB,QAAL,CAAc;AAAEtB,YAAAA,mBAAmB,EAAG,KAAKF,KAAL,CAAWE,mBAAX,GAAiC;AAAzD,WAAd;AACA;;AACF,aAAK,UAAL;AACE,eAAKsB,QAAL,CAAc;AAAErB,YAAAA,iBAAiB,EAAG,KAAKH,KAAL,CAAWG,iBAAX,GAA+B;AAArD,WAAd;AACA;;AACF,aAAK,QAAL;AACE,eAAKqB,QAAL,CAAc;AAAEpB,YAAAA,eAAe,EAAG,KAAKJ,KAAL,CAAWI,eAAX,GAA6B;AAAjD,WAAd;AACA;;AACF,aAAK,OAAL;AACE,eAAKoB,QAAL,CAAc;AAAEnB,YAAAA,cAAc,EAAG,KAAKL,KAAL,CAAWK,cAAX,GAA4B;AAA/C,WAAd;AACA;AAZJ;AAcD,KA3GyB;;AAAA,SA6G1BqC,UA7G0B,GA6Gb,CAACF,GAAD,EAAMV,IAAN,KAAe;AAC1B,YAAMW,IAAI,GAAGD,GAAb;;AACA,cAAQC,IAAR;AACE,aAAK,MAAL;AACE,iBAAO3E,SAAS,EAAhB;;AACF,aAAK,WAAL;AACE,iBAAO,oBAAC,SAAD;AAAW,YAAA,IAAI,EAAEI,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;;AACF,aAAK,UAAL;AACE,iBAAO,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACL,oBAAC,UAAD;AAAY,YAAA,UAAU,EAAE,KAAxB;AAA+B,YAAA,MAAM,EAAE,WAAW,KAAK8B,KAAL,CAAWa,WAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADK,EAEL;AACE,YAAA,OAAO,EAAE,MAAM;AACb8B,cAAAA,YAAY,CAACC,OAAb,CACE,cADF,EAEE,KAAKC,cAAL,CAAoBC,WAApB,EAFF;AAID,aANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFK,CAAP;;AAWF,aAAK,QAAL;AACE,iBAAO,oBAAC,MAAD;AAAQ,YAAA,IAAI,EAAE,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;;AACA,aAAK,OAAL;AACE,iBAAO,oBAAC,eAAD;AAAiB,YAAA,SAAS,EAAC,mBAA3B;AAA+C,YAAA,IAAI,EAAE,KAAK9C,KAAL,CAAWa,WAAhE;AAA6E,YAAA,UAAU,EAAE,KAAKb,KAAL,CAAWc,YAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AApBN;AAuBD,KAtIyB;;AAAA,SAwI1BiC,kBAxI0B,GAwIJP,GAAD,IAAS;AAC5B,YAAMC,IAAI,GAAGD,GAAb;;AACA,cAAQC,IAAR;AACE,aAAK,WAAL;AACE,iBAAO,oBAAC,qBAAD;AAAuB,YAAA,IAAI,EAAEA,IAA7B;AAAmC,YAAA,KAAK,EAAE,KAAKzC,KAAL,CAAWE,mBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;;AACF,aAAK,UAAL;AACE,iBAAO,oBAAC,oBAAD;AAAsB,YAAA,IAAI,EAAEuC,IAA5B;AAAkC,YAAA,KAAK,EAAE,KAAKzC,KAAL,CAAWG,iBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;;AACF,aAAK,QAAL;AACE,iBAAO,oBAAC,kBAAD;AAAoB,YAAA,IAAI,EAAEsC,IAA1B;AAAgC,YAAA,KAAK,EAAE,KAAKzC,KAAL,CAAWI,eAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;;AACF,aAAK,OAAL;AACE,iBAAO,oBAAC,iBAAD;AAAmB,YAAA,IAAI,EAAEqC,IAAzB;AAA+B,YAAA,KAAK,EAAE,KAAKzC,KAAL,CAAWK,cAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AARJ;AAUD,KApJyB;AAAA;;AAsJ1B2C,EAAAA,sBAAsB,CAACrB,IAAD,EAAOsB,KAAP,EAAc;AAClC,UAAMR,IAAI,GAAGd,IAAb;;AACA,QAAIsB,KAAK,GAAG,CAAZ,EAAe;AACb,aAAO,UAAUR,IAAV,GAAiB,IAAjB,GAAwB,GAAxB,GAA8B,OAArC;AACD;;AAED,QAAIS,WAAW,GAAG,UAAUT,IAAV,GAAiB,IAAjB,GAAwBQ,KAAxB,GAAgC,OAAlD;AACA3B,IAAAA,OAAO,CAACC,GAAR,CAAY2B,WAAZ;AACA,WAAOA,WAAP;AAED;;AAEDC,EAAAA,MAAM,GAAG;AAEP,WACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAE,KAAKH,sBAAL,CAA4B,WAA5B,EAAyC,KAAKhD,KAAL,CAAWE,mBAApD,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAKE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAE,KAAK8C,sBAAL,CAA4B,UAA5B,EAAwC,KAAKhD,KAAL,CAAWG,iBAAnD,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EAME,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAE,KAAK6C,sBAAL,CAA4B,QAA5B,EAAsC,KAAKhD,KAAL,CAAWI,eAAjD,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAOE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAE,KAAK4C,sBAAL,CAA4B,OAA5B,EAAqC,KAAKhD,KAAL,CAAWK,cAAhD,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAQC,KAAKL,KAAL,CAAWQ,SARZ,CAFF,EAaE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAE,KAAKR,KAAL,CAAWhB,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEGnB,SAAS,IAAIA,SAAS,CAACuF,GAAV,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAC1B,oBAAC,WAAD;AAAa,MAAA,IAAI,MAAjB;AAAkB,MAAA,OAAO,EACvB,KAAK5B,UAAL,CAAgB6B,IAAhB,CAAqB,IAArB,EAA2BF,CAAC,CAAC1B,IAA7B,EAAmC0B,CAAC,CAACzB,IAArC,EAA2CyB,CAAC,CAACrD,KAA7C,EAAoDqD,CAAC,CAACxB,IAAtD,EAA4DwB,CAAC,CAACvB,IAA9D,EAAoEuB,CAAC,CAACtB,KAAtE,CADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMsB,CAAC,CAACG,KAAR,SAAkBH,CAAC,CAACI,KAApB,OAA4BJ,CAAC,CAACzB,IAA9B,CAJF,EAMG,KAAKmB,kBAAL,CAAwBM,CAAC,CAAC1B,IAA1B,CANH,CADY,CAFhB,CADF,CAFF,EAqBE,oBAAC,SAAD;AAAW,MAAA,WAAW,EAAE,KAAK3B,KAAL,CAAWS,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKiC,UAAL,CAAgB,KAAK1C,KAAL,CAAWS,WAA3B,CADH,CAFF,CArBF,CAFF,CAFF,CAFF,EAwCE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE,KAAKT,KAAL,CAAWa,WAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CAxCF,EA2CE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3CF,CAbF,CADF,CADF;AAkED;;AAtOyB;;AAyO5B,eAAed,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Crossword from \"react-crossword\";\nimport Slider from \"react-slider-game\";\nimport tourStops from './components/data/tourStops.jsx';\n// import MemoryGame from \"react-memory-game\";\nimport mapVector from './components/mapVector';\nimport MemoryGame from \"./components/memoryGame\";\n// import Drawing, { brushCustom } from 'react-drawing';\nimport CanvasDraw from \"react-canvas-draw\";\nimport CompareImgInput from \"./components/CompareImgInput\";\nimport crosswordLA from \"./components/data/crosswordLA\"\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\nimport { timingSafeEqual } from 'crypto';\n\nconst Scoreboard = styled.div`\n\n  padding: 40px;\n  position: fixed;\n  left: 0;\n  bottom: 0;\n  // background-color: lightblue;\n  display: flex;\n\n`\nconst Badge = styled.div`\n\nmargin: 5px;\n  height: 20px;\n  width: 20px;\n  background-image: ${props => \"url(\" + props.star + \")\"};\n  background-size: cover;\n\n`\n\nconst MapContainer = styled.div`\n\n  background-image: url(img/background.jpg);\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n\n`\n\nconst Map = styled.div`\n\n  // background-color: orange;\n  // border: 1px solid red;\n  height: 600px;\n  width: 1200px;\n  display: flex;\n  border: 1px solid ${props => props.theme.brown};\n\n`\n\nconst MapListItem = styled.div`\n\n  // background-color: gray;\n  min-height: 40px;\n  margin: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n\n`\n\nconst RenderMapList = styled.div`\n\n  overflow: scroll;\n\n`\n\nconst TourStopList = styled.div`\n\n  overflow: scroll;\n  width: 400px;\n  background-color: white;\n  padding-left: 10px;\n\n`\n\nconst MapRender = styled.div`\n\n  padding: 15px;\n  background-color: ${props => props.gameColor};\n  height: 100$;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  display:flex;\n  flex-direction: column;\n\n  .compareImageInput {\n    width: 400px;\n  }\n\n`\n\nconst GameWrap = styled.div`\n\n  height: 100%;\n  width: 100%;\n  // background-color: red;\n\n`\n\nconst MapListBadgeCrossword = styled.div`\n\n  height: 20px;\n  width: 20px;\n  // background-color:  blue;\n  background-image: url(img/crossword-01.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n\n`\n\nconst MapListBadgeColoring = styled.div`\n\n  height: 20px;\n  width: 20px;\n  background-image: url(img/coloring-01.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n\n`\nconst MapListBadgeWaldo = styled.div`\n\n  height: 20px;\n  width: 20px;\n  background-image: url(img/waldo-01.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n\n`\nconst MapListBadgePuzzle = styled.div`\n\n  height: 20px;\n  width: 20px;\n  background-image: url(img/puzzle-01.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n\n`\n\nconst DrawingWrap = styled.div`\n\n  height: 500px;\n  width: 500px;\n  // background-color: white;\n  background-image: ${props => props.coloringImage}\n`\n\nconst CompareWrap = styled.div`\n\n  height: 500px;\n  width: 500px;\n\n`\n\nclass App extends Component {\n\n  state = {\n    score: 0,\n\n    completedCrosswords: 0,\n    completedColoring: 0,\n    completedPuzzle: 0,\n    completedWaldo: 0,\n\n    gameStart: true,\n    gameCompleted: false,\n    gameState: 0,\n\n    currentGame: \"home\",\n    currentCity: \"no city\",\n    currentState: \"no state\",\n    currentDate: \"no date\",\n    currentData: \"no data\",\n    currentData2: \"no data2\",\n\n    modalShown: false,\n\n    theme: {\n      brown: \"#583539\",\n      purple: \"#B486BC\",\n      yellow: \"#FDB714\",\n      green: \"#88CCA4\",\n      pink: \"#E25085\"\n\n    }\n  }\n\n  componentDidMount = () => {\n\n  }\n\n  componentDidUpdate = () => {\n\n    console.log(\"component did update // current game = \" + this.state.currentGame)\n    console.log(\"component did update // current data = \" + this.state.currentData)\n    console.log(\"data2 = \" + this.state.currentData2)\n\n    if (this.state.completedCrosswords > 0 && this.state.completedColoring > 0 && this.state.completedPuzzle > 0 && this.state.completedWaldo > 0 && this.state.gameState === 0) {\n      this.setState({gameState: 1})\n    }\n\n  }\n\n  finishGame = () => {\n\n    this.setState({ gameCompleted: true });\n\n  }\n\n  changeGame = (game, city, state, date, data, data2) => {\n    console.log(data2)\n    const newGame = game;\n    const newCity = city;\n    const newState = state;\n    const newDate = date;\n    const newData = data;\n    const newData2 = data2;\n    this.setState({ currentGame: newGame });\n    this.setState({ currentCity: newCity });\n    this.setState({ currentAction: newState });\n    this.setState({ currentDate: newDate });\n    this.setState({ currentData: newData });\n    this.setState({ currentData2: newData2 });\n    console.log(\"previous game \" + this.state.currentGame);\n    this.completeCurrentGame(newGame)\n  }\n\n  gameColor = (arg) => {\n\n    const expr = arg\n    switch (expr) {\n      case \"crossword\":\n        return \"blue\";\n      case \"coloring\":\n        return \"orange\";\n      case \"puzzle\":\n        return \"pink\";\n      case \"waldo\":\n        return \"gray\";\n      case \"home\":\n        return \"lightblue\";\n    }\n  }\n\n  completeCurrentGame = (arg) => {\n    const expr = arg\n    console.log(\"score added for \" + expr)\n    switch (expr) {\n      case \"crossword\":\n        this.setState({ completedCrosswords: (this.state.completedCrosswords + 1) })\n        return;\n      case \"coloring\":\n        this.setState({ completedColoring: (this.state.completedColoring + 1) })\n        return;\n      case \"puzzle\":\n        this.setState({ completedPuzzle: (this.state.completedPuzzle + 1) })\n        return;\n      case \"waldo\":\n        this.setState({ completedWaldo: (this.state.completedWaldo + 1) })\n        return;\n    }\n  }\n\n  renderGame = (arg, data) => {\n    const expr = arg\n    switch (expr) {\n      case \"home\":\n        return mapVector()\n      case \"crossword\":\n        return <Crossword data={crosswordLA} />;\n      case \"coloring\":\n        return <DrawingWrap >\n          <CanvasDraw brushColor={\"red\"} imgSrc={\"./img/\" + this.state.currentData} />\n          <button\n            onClick={() => {\n              localStorage.setItem(\n                \"savedDrawing\",\n                this.saveableCanvas.getSaveData()\n              );\n            }}\n          >save</button>\n        </DrawingWrap>\n      case \"puzzle\":\n        return <Slider size={2} />;\n        case \"waldo\":\n          return <CompareImgInput className=\"compareImageInput\" data={this.state.currentData} rightImage={this.state.currentData2}/>\n    }\n\n  }\n\n  renderMapListBadge = (arg) => {\n    const expr = arg\n    switch (expr) {\n      case \"crossword\":\n        return <MapListBadgeCrossword type={expr} count={this.state.completedCrosswords}/>;\n      case \"coloring\":\n        return <MapListBadgeColoring type={expr} count={this.state.completedColoring}/>;\n      case \"puzzle\":\n        return <MapListBadgePuzzle type={expr} count={this.state.completedPuzzle}/>;\n      case \"waldo\":\n        return <MapListBadgeWaldo type={expr} count={this.state.completedWaldo}/>;\n      }\n  }\n\n  renderCompletionStatus(game, count) {\n    const expr = game\n    if (count > 2) {\n      return \"'img/\" + expr + \"-0\" + \"3\" + \".png'\"\n    }\n\n    let badgeString = \"'img/\" + expr + \"-0\" + count + \".png'\"\n    console.log(badgeString)\n    return badgeString\n\n  }\n\n  render() {\n\n    return (\n      <Router>\n        <div>\n\n          <Scoreboard>\n            {/* <RenderBadges gameStatus={gameStatus} badges={this.state.badges} /> */}\n          \n            <Badge star={this.renderCompletionStatus(\"crossword\", this.state.completedCrosswords)}></Badge>            \n\n            <Badge star={this.renderCompletionStatus(\"coloring\", this.state.completedColoring)}></Badge>            \n            <Badge star={this.renderCompletionStatus(\"puzzle\", this.state.completedPuzzle)}></Badge>            \n            <Badge star={this.renderCompletionStatus(\"waldo\", this.state.completedWaldo)}></Badge>            \n          {this.state.gameState}\n          </Scoreboard>\n\n          <Switch>\n\n            <Route exact path=\"/\">\n\n              <MapContainer>\n\n                <Map theme={this.state.theme}>\n\n                  <TourStopList>\n                    <RenderMapList>\n\n                      {tourStops && tourStops.map((x, i) => (\n                        <MapListItem soma onClick={\n                          this.changeGame.bind(this, x.game, x.city, x.state, x.date, x.data, x.data2)\n                        }  >\n\n                          <div>{x.date1} / {x.date2} {x.city}\n                          </div>\n                          {this.renderMapListBadge(x.game)}\n\n                        </MapListItem>\n                      ))\n                      }\n\n                    </RenderMapList>\n                  </TourStopList>\n\n                  <MapRender currentGame={this.state.currentGame}>\n                  {/* {this.state.currentData} */}\n                    <GameWrap>\n                      {this.renderGame(this.state.currentGame)}\n                    </GameWrap>\n                  </MapRender>\n\n                </Map>\n\n              </MapContainer>\n\n            </Route>\n\n            <Route path=\"/map\">\n            <CompareImgInput data={this.state.currentData}/>\n            </Route>\n            <Route path=\"/*\">\n            </Route>\n          </Switch>\n\n        </div>\n\n      </Router>\n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}